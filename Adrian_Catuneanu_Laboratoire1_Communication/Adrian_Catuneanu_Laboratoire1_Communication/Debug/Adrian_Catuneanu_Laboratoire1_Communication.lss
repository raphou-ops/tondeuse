
Adrian_Catuneanu_Laboratoire1_Communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  000008a8  0000093c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000148  00800202  00800202  0000093e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000093e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000970  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001724  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000021a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008b1  00000000  00000000  0000308f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  00003940  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c5  00000000  00000000  00003b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008cf  00000000  00000000  00004329  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004bf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	4b c1       	rjmp	.+662    	; 0x2ec <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	ec c1       	rjmp	.+984    	; 0x46a <__vector_36>
  92:	00 00       	nop
  94:	b5 c1       	rjmp	.+874    	; 0x400 <__vector_37>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 ea       	ldi	r30, 0xA8	; 168
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 34       	cpi	r26, 0x4A	; 74
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	ae d0       	rcall	.+348    	; 0x27c <main>
 120:	c1 c3       	rjmp	.+1922   	; 0x8a4 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_lcdWrite4bits>:
* @return void
*/

void _lcdWrite4bits(uint8_t data, uint8_t rs)
{
	if(rs)
 124:	66 23       	and	r22, r22
 126:	31 f0       	breq	.+12     	; 0x134 <_lcdWrite4bits+0x10>
		LCD_RS_ON();
 128:	e2 e0       	ldi	r30, 0x02	; 2
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	90 81       	ld	r25, Z
 12e:	90 61       	ori	r25, 0x10	; 16
 130:	90 83       	st	Z, r25
 132:	05 c0       	rjmp	.+10     	; 0x13e <_lcdWrite4bits+0x1a>
	else
		LCD_RS_OFF();
 134:	e2 e0       	ldi	r30, 0x02	; 2
 136:	f1 e0       	ldi	r31, 0x01	; 1
 138:	90 81       	ld	r25, Z
 13a:	9f 7e       	andi	r25, 0xEF	; 239
 13c:	90 83       	st	Z, r25
	
	LCD_E_ON();
 13e:	e2 e0       	ldi	r30, 0x02	; 2
 140:	f1 e0       	ldi	r31, 0x01	; 1
 142:	90 81       	ld	r25, Z
 144:	98 60       	ori	r25, 0x08	; 8
 146:	90 83       	st	Z, r25
	
	if(data & 1)
 148:	80 ff       	sbrs	r24, 0
 14a:	04 c0       	rjmp	.+8      	; 0x154 <_lcdWrite4bits+0x30>
		LCD_DB4_ON();
 14c:	9e b1       	in	r25, 0x0e	; 14
 14e:	98 60       	ori	r25, 0x08	; 8
 150:	9e b9       	out	0x0e, r25	; 14
 152:	03 c0       	rjmp	.+6      	; 0x15a <_lcdWrite4bits+0x36>
	else
		LCD_DB4_OFF();
 154:	9e b1       	in	r25, 0x0e	; 14
 156:	97 7f       	andi	r25, 0xF7	; 247
 158:	9e b9       	out	0x0e, r25	; 14
	
	if(data & 2)
 15a:	81 ff       	sbrs	r24, 1
 15c:	04 c0       	rjmp	.+8      	; 0x166 <_lcdWrite4bits+0x42>
		LCD_DB5_ON();
 15e:	94 b3       	in	r25, 0x14	; 20
 160:	90 62       	ori	r25, 0x20	; 32
 162:	94 bb       	out	0x14, r25	; 20
 164:	03 c0       	rjmp	.+6      	; 0x16c <_lcdWrite4bits+0x48>
	else
		LCD_DB5_OFF();
 166:	94 b3       	in	r25, 0x14	; 20
 168:	9f 7d       	andi	r25, 0xDF	; 223
 16a:	94 bb       	out	0x14, r25	; 20
	
	if(data & 4)
 16c:	82 ff       	sbrs	r24, 2
 16e:	04 c0       	rjmp	.+8      	; 0x178 <_lcdWrite4bits+0x54>
		LCD_DB6_ON();
 170:	9e b1       	in	r25, 0x0e	; 14
 172:	90 62       	ori	r25, 0x20	; 32
 174:	9e b9       	out	0x0e, r25	; 14
 176:	03 c0       	rjmp	.+6      	; 0x17e <_lcdWrite4bits+0x5a>
	else
		LCD_DB6_OFF();
 178:	9e b1       	in	r25, 0x0e	; 14
 17a:	9f 7d       	andi	r25, 0xDF	; 223
 17c:	9e b9       	out	0x0e, r25	; 14
	
	if(data & 8)
 17e:	83 ff       	sbrs	r24, 3
 180:	04 c0       	rjmp	.+8      	; 0x18a <_lcdWrite4bits+0x66>
		LCD_DB7_ON();
 182:	8e b1       	in	r24, 0x0e	; 14
 184:	80 61       	ori	r24, 0x10	; 16
 186:	8e b9       	out	0x0e, r24	; 14
 188:	03 c0       	rjmp	.+6      	; 0x190 <_lcdWrite4bits+0x6c>
	else
		LCD_DB7_OFF();
 18a:	8e b1       	in	r24, 0x0e	; 14
 18c:	8f 7e       	andi	r24, 0xEF	; 239
 18e:	8e b9       	out	0x0e, r24	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 190:	85 e0       	ldi	r24, 0x05	; 5
 192:	8a 95       	dec	r24
 194:	f1 f7       	brne	.-4      	; 0x192 <_lcdWrite4bits+0x6e>
 196:	00 00       	nop
	
	_delay_us(1);
	
	LCD_E_OFF();
 198:	e2 e0       	ldi	r30, 0x02	; 2
 19a:	f1 e0       	ldi	r31, 0x01	; 1
 19c:	80 81       	ld	r24, Z
 19e:	87 7f       	andi	r24, 0xF7	; 247
 1a0:	80 83       	st	Z, r24
 1a2:	85 e0       	ldi	r24, 0x05	; 5
 1a4:	8a 95       	dec	r24
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <_lcdWrite4bits+0x80>
 1a8:	00 00       	nop
 1aa:	08 95       	ret

000001ac <_lcdWrite8Bits>:
* @param uint8_t rs Recoit la validation et execute la commande data si rs est a 1.
* @return void
*/

void _lcdWrite8Bits(uint8_t data, uint8_t rs)
{
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	c8 2f       	mov	r28, r24
 1b2:	d6 2f       	mov	r29, r22
	_lcdWrite4bits(data>>4,rs);
 1b4:	82 95       	swap	r24
 1b6:	8f 70       	andi	r24, 0x0F	; 15
 1b8:	b5 df       	rcall	.-150    	; 0x124 <_lcdWrite4bits>
	_lcdWrite4bits(data,rs);
 1ba:	6d 2f       	mov	r22, r29
 1bc:	8c 2f       	mov	r24, r28
 1be:	b2 df       	rcall	.-156    	; 0x124 <_lcdWrite4bits>
 1c0:	85 ed       	ldi	r24, 0xD5	; 213
 1c2:	8a 95       	dec	r24
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <_lcdWrite8Bits+0x16>
 1c6:	00 00       	nop
	_delay_us(40);
}
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <lcdInit>:
* @return void
*/

void lcdInit()
{
	LCD_RS_INIT();
 1ce:	e1 e0       	ldi	r30, 0x01	; 1
 1d0:	f1 e0       	ldi	r31, 0x01	; 1
 1d2:	80 81       	ld	r24, Z
 1d4:	80 61       	ori	r24, 0x10	; 16
 1d6:	80 83       	st	Z, r24
	LCD_E_INIT();
 1d8:	80 81       	ld	r24, Z
 1da:	88 60       	ori	r24, 0x08	; 8
 1dc:	80 83       	st	Z, r24
	LCD_DB4_INIT();
 1de:	8d b1       	in	r24, 0x0d	; 13
 1e0:	88 60       	ori	r24, 0x08	; 8
 1e2:	8d b9       	out	0x0d, r24	; 13
	LCD_DB5_INIT();
 1e4:	83 b3       	in	r24, 0x13	; 19
 1e6:	80 62       	ori	r24, 0x20	; 32
 1e8:	83 bb       	out	0x13, r24	; 19
	LCD_DB6_INIT();
 1ea:	8d b1       	in	r24, 0x0d	; 13
 1ec:	80 62       	ori	r24, 0x20	; 32
 1ee:	8d b9       	out	0x0d, r24	; 13
	LCD_DB7_INIT();
 1f0:	8d b1       	in	r24, 0x0d	; 13
 1f2:	80 61       	ori	r24, 0x10	; 16
 1f4:	8d b9       	out	0x0d, r24	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	2f ef       	ldi	r18, 0xFF	; 255
 1f8:	89 ef       	ldi	r24, 0xF9	; 249
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <lcdInit+0x2e>
 204:	00 c0       	rjmp	.+0      	; 0x206 <lcdInit+0x38>
 206:	00 00       	nop
	
	
	_delay_ms(20);
	
	_lcdWrite4bits(3,0);
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	83 e0       	ldi	r24, 0x03	; 3
 20c:	8b df       	rcall	.-234    	; 0x124 <_lcdWrite4bits>
 20e:	8f e1       	ldi	r24, 0x1F	; 31
 210:	9e e4       	ldi	r25, 0x4E	; 78
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <lcdInit+0x44>
 216:	00 c0       	rjmp	.+0      	; 0x218 <lcdInit+0x4a>
 218:	00 00       	nop
	
	_delay_ms(5);
	
	_lcdWrite4bits(3,0);
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	83 e0       	ldi	r24, 0x03	; 3
 21e:	82 df       	rcall	.-252    	; 0x124 <_lcdWrite4bits>
 220:	8f e9       	ldi	r24, 0x9F	; 159
 222:	9f e0       	ldi	r25, 0x0F	; 15
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <lcdInit+0x56>
 228:	00 c0       	rjmp	.+0      	; 0x22a <lcdInit+0x5c>
 22a:	00 00       	nop
	
	_delay_ms(1);
	
	_lcdWrite4bits(3,0);
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	79 df       	rcall	.-270    	; 0x124 <_lcdWrite4bits>
 232:	8f e9       	ldi	r24, 0x9F	; 159
 234:	9f e0       	ldi	r25, 0x0F	; 15
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <lcdInit+0x68>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <lcdInit+0x6e>
	
	_delay_ms(1);
	
	_lcdWrite4bits(2,0); // mode 4 bits active
 23c:	00 00       	nop
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	70 df       	rcall	.-288    	; 0x124 <_lcdWrite4bits>
 244:	8f e9       	ldi	r24, 0x9F	; 159
 246:	9f e0       	ldi	r25, 0x0F	; 15
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <lcdInit+0x7a>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <lcdInit+0x80>
	
	_delay_ms(1);
	
	_lcdWrite8Bits(0x28,0); // mode 4 bits - 2 lignes
 24e:	00 00       	nop
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	88 e2       	ldi	r24, 0x28	; 40
	
	_lcdWrite8Bits(0x08,0); // LCD a off
 254:	ab df       	rcall	.-170    	; 0x1ac <_lcdWrite8Bits>
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	88 e0       	ldi	r24, 0x08	; 8
	
	_lcdWrite8Bits(0x01,0); // Clear LCD
 25a:	a8 df       	rcall	.-176    	; 0x1ac <_lcdWrite8Bits>
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	a5 df       	rcall	.-182    	; 0x1ac <_lcdWrite8Bits>
 262:	8f e3       	ldi	r24, 0x3F	; 63
 264:	9f e1       	ldi	r25, 0x1F	; 31
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <lcdInit+0x98>
	
	_delay_ms(2);
	
	_lcdWrite8Bits(0x06,0); // Incremente vers la gauche
 26a:	00 c0       	rjmp	.+0      	; 0x26c <lcdInit+0x9e>
 26c:	00 00       	nop
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	86 e0       	ldi	r24, 0x06	; 6
	
	_lcdWrite8Bits(0x0F,0); // LCD a on, curseur a on qui clignote
 272:	9c df       	rcall	.-200    	; 0x1ac <_lcdWrite8Bits>
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	8f e0       	ldi	r24, 0x0F	; 15
 278:	99 cf       	rjmp	.-206    	; 0x1ac <_lcdWrite8Bits>
 27a:	08 95       	ret

0000027c <main>:
// #define BT2_APPUYE()	((PIND &(1<<6))==0)
// #define BT1_INIT() 	    PORTB |= (1<<7)
// #define BT2_INIT() 	    PORTD |= (1<<6)//pull ups intern
int main(void)
{
	DDRB = DDRB | (1<<7);
 27c:	84 b1       	in	r24, 0x04	; 4
 27e:	80 68       	ori	r24, 0x80	; 128
 280:	84 b9       	out	0x04, r24	; 4
	// 	BT1_INIT();
	// 	BT2_INIT();
	lcdInit();
 282:	a5 df       	rcall	.-182    	; 0x1ce <lcdInit>
	usartInit(9600,16000000);
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	34 e2       	ldi	r19, 0x24	; 36
 288:	44 ef       	ldi	r20, 0xF4	; 244
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	60 e8       	ldi	r22, 0x80	; 128
 28e:	75 e2       	ldi	r23, 0x25	; 37
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	58 d0       	rcall	.+176    	; 0x346 <usartInit>
	//usartSendString("adrian");
	//lcdPuts("Adrian");
	TCCR0B |= (1<<CS01) | (1<<CS00); //avec diviseur de clock /64.
 296:	85 b5       	in	r24, 0x25	; 37
 298:	83 60       	ori	r24, 0x03	; 3
 29a:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= (1<<WGM01);//Configuration du timer 0 en CTC
 29c:	84 b5       	in	r24, 0x24	; 36
 29e:	82 60       	ori	r24, 0x02	; 2
 2a0:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= (1<<OCIE0A);//Output Compare Match A Interrupt Enable.
 2a2:	ee e6       	ldi	r30, 0x6E	; 110
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	82 60       	ori	r24, 0x02	; 2
 2aa:	80 83       	st	Z, r24
	OCR0A = 249;//Top a la valeur 249 afin de obtenir un periode de 1ms fixe.
 2ac:	89 ef       	ldi	r24, 0xF9	; 249
 2ae:	87 bd       	out	0x27, r24	; 39
	sei();//fait appel aux interruptions global
 2b0:	78 94       	sei
	
	while (1)
	{
		
		if(refreshBouton==1)
 2b2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	79 f4       	brne	.+30     	; 0x2d8 <main+0x5c>
			//PORTB |= 1<<7;
			/*if(PORTB | (1<<7) == 1)
			PORTB = PORTB & ~(1<<7);
			else
			PORTB = PORTB | (1<<7);*/
			refreshBouton = 0;
 2ba:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
			// 			{

			// 				usartSendByte('2');
			// 			}
			// 				etatPrecedant2 = !(BT2_APPUYE());
			if(pos>=16)
 2be:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <pos>
 2c2:	80 31       	cpi	r24, 0x10	; 16
 2c4:	48 f0       	brcs	.+18     	; 0x2d8 <main+0x5c>
			{
				pos=0;
 2c6:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <pos>
				row=!row;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <__data_end>
 2d0:	91 11       	cpse	r25, r1
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
			
			}
			
		}
		
		if(usartRxAvailable())
 2d8:	70 d0       	rcall	.+224    	; 0x3ba <usartRxAvailable>
 2da:	88 23       	and	r24, r24
		{
			i = usartRemRxData();
 2dc:	51 f3       	breq	.-44     	; 0x2b2 <main+0x36>
 2de:	70 d0       	rcall	.+224    	; 0x3c0 <usartRemRxData>
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <i+0x1>
 2e6:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <i>
 2ea:	e3 cf       	rjmp	.-58     	; 0x2b2 <main+0x36>

000002ec <__vector_21>:
}
/**
* @brief //A chaque interruption du timer 0 le programme execute DixiemeDeSec++ comme ca on verifie l'etat des boutons a chaque 100ms.
*/
ISR(TIMER0_COMPA_vect)//Quand l'interruption globale est appeller le programme vient executer le vecteur Comparatif.
{
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	2f 93       	push	r18
 2f8:	8f 93       	push	r24
 2fa:	9f 93       	push	r25
	cntDixiemeDeSec++;
 2fc:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <cntDixiemeDeSec>
 300:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <cntDixiemeDeSec+0x1>
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <cntDixiemeDeSec+0x1>
 30a:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <cntDixiemeDeSec>
	if(cntDixiemeDeSec <= 1000)
 30e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <cntDixiemeDeSec>
 312:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <cntDixiemeDeSec+0x1>
 316:	89 3e       	cpi	r24, 0xE9	; 233
 318:	93 40       	sbci	r25, 0x03	; 3
 31a:	68 f4       	brcc	.+26     	; 0x336 <__vector_21+0x4a>
	{
		cntDixiemeDeSec -= 1000;
 31c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <cntDixiemeDeSec>
 320:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <cntDixiemeDeSec+0x1>
 324:	88 5e       	subi	r24, 0xE8	; 232
 326:	93 40       	sbci	r25, 0x03	; 3
 328:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <cntDixiemeDeSec+0x1>
 32c:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <cntDixiemeDeSec>
		refreshBouton = 1;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	}
}
 336:	9f 91       	pop	r25
 338:	8f 91       	pop	r24
 33a:	2f 91       	pop	r18
 33c:	0f 90       	pop	r0
 33e:	0f be       	out	0x3f, r0	; 63
 340:	0f 90       	pop	r0
 342:	1f 90       	pop	r1
 344:	18 95       	reti

00000346 <usartInit>:
		if(!usartSendByte(source[i]))
			nbOctet++;
		
	}
	return nbOctet;
}
 346:	8f 92       	push	r8
 348:	9f 92       	push	r9
 34a:	af 92       	push	r10
 34c:	bf 92       	push	r11
 34e:	cf 92       	push	r12
 350:	df 92       	push	r13
 352:	ef 92       	push	r14
 354:	ff 92       	push	r15
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	49 01       	movw	r8, r18
 35c:	5a 01       	movw	r10, r20
 35e:	c9 ec       	ldi	r28, 0xC9	; 201
 360:	d0 e0       	ldi	r29, 0x00	; 0
 362:	28 e1       	ldi	r18, 0x18	; 24
 364:	28 83       	st	Y, r18
 366:	26 e2       	ldi	r18, 0x26	; 38
 368:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
 36c:	aa d1       	rcall	.+852    	; 0x6c2 <__floatunsisf>
 36e:	20 e0       	ldi	r18, 0x00	; 0
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	40 e8       	ldi	r20, 0x80	; 128
 374:	51 e4       	ldi	r21, 0x41	; 65
 376:	33 d2       	rcall	.+1126   	; 0x7de <__mulsf3>
 378:	6b 01       	movw	r12, r22
 37a:	7c 01       	movw	r14, r24
 37c:	c5 01       	movw	r24, r10
 37e:	b4 01       	movw	r22, r8
 380:	a0 d1       	rcall	.+832    	; 0x6c2 <__floatunsisf>
 382:	a7 01       	movw	r20, r14
 384:	96 01       	movw	r18, r12
 386:	09 d1       	rcall	.+530    	; 0x59a <__divsf3>
 388:	20 e0       	ldi	r18, 0x00	; 0
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	40 e0       	ldi	r20, 0x00	; 0
 38e:	5f e3       	ldi	r21, 0x3F	; 63
 390:	9f d0       	rcall	.+318    	; 0x4d0 <__subsf3>
 392:	6b d1       	rcall	.+726    	; 0x66a <__fixunssfsi>
 394:	70 93 cd 00 	sts	0x00CD, r23	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
 398:	60 93 cc 00 	sts	0x00CC, r22	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
 39c:	88 81       	ld	r24, Y
 39e:	80 68       	ori	r24, 0x80	; 128
 3a0:	88 83       	st	Y, r24
 3a2:	78 94       	sei
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	ff 90       	pop	r15
 3aa:	ef 90       	pop	r14
 3ac:	df 90       	pop	r13
 3ae:	cf 90       	pop	r12
 3b0:	bf 90       	pop	r11
 3b2:	af 90       	pop	r10
 3b4:	9f 90       	pop	r9
 3b6:	8f 90       	pop	r8
 3b8:	08 95       	ret

000003ba <usartRxAvailable>:
 3ba:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rxCnt>
 3be:	08 95       	ret

000003c0 <usartRemRxData>:
 3c0:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rxCnt>
 3c4:	88 23       	and	r24, r24
 3c6:	c9 f0       	breq	.+50     	; 0x3fa <usartRemRxData+0x3a>
 3c8:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <rxBufferOut>
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	8e 0f       	add	r24, r30
 3d0:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <rxBufferOut>
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	e6 5b       	subi	r30, 0xB6	; 182
 3d8:	fd 4f       	sbci	r31, 0xFD	; 253
 3da:	80 81       	ld	r24, Z
 3dc:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <rxContent>
 3e0:	f8 94       	cli
 3e2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rxCnt>
 3e6:	81 50       	subi	r24, 0x01	; 1
 3e8:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <rxCnt>
 3ec:	78 94       	sei
 3ee:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <rxBufferOut>
 3f2:	88 23       	and	r24, r24
 3f4:	14 f4       	brge	.+4      	; 0x3fa <usartRemRxData+0x3a>
 3f6:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <rxBufferOut>
 3fa:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <rxContent>
 3fe:	08 95       	ret

00000400 <__vector_37>:

ISR(USART1_UDRE_vect)//a chaque fois que l'interruption est appeller le programme tansmet des donnes avec le registre UDR1 si il y a bien une donne a transmettre.
{
 400:	1f 92       	push	r1
 402:	0f 92       	push	r0
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	0f 92       	push	r0
 408:	11 24       	eor	r1, r1
 40a:	0b b6       	in	r0, 0x3b	; 59
 40c:	0f 92       	push	r0
 40e:	8f 93       	push	r24
 410:	ef 93       	push	r30
 412:	ff 93       	push	r31
	if(!txCnt)
 414:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <txCnt>
 418:	81 11       	cpse	r24, r1
 41a:	06 c0       	rjmp	.+12     	; 0x428 <__vector_37+0x28>
	{
		UCSR1B &= ~(1<<UDRIE1);//desactive l'interruption si il n'y a pus de contenu dans txCnt
 41c:	e9 ec       	ldi	r30, 0xC9	; 201
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	80 81       	ld	r24, Z
 422:	8f 7d       	andi	r24, 0xDF	; 223
 424:	80 83       	st	Z, r24
 426:	17 c0       	rjmp	.+46     	; 0x456 <__vector_37+0x56>
	}
	else
	{
		UDR1 = txBuffer[txBufferOut++];//sert a transmettre les donnes du txBuffer vers le PC
 428:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <txBufferOut>
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	8e 0f       	add	r24, r30
 430:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <txBufferOut>
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	e6 53       	subi	r30, 0x36	; 54
 438:	fd 4f       	sbci	r31, 0xFD	; 253
 43a:	80 81       	ld	r24, Z
 43c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
		txCnt--;
 440:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <txCnt>
 444:	81 50       	subi	r24, 0x01	; 1
 446:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <txCnt>
		if(txBufferOut >= TX_BUFFER_SIZE)
 44a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <txBufferOut>
 44e:	88 23       	and	r24, r24
 450:	14 f4       	brge	.+4      	; 0x456 <__vector_37+0x56>
			txBufferOut = 0;
 452:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <txBufferOut>
	}
}
 456:	ff 91       	pop	r31
 458:	ef 91       	pop	r30
 45a:	8f 91       	pop	r24
 45c:	0f 90       	pop	r0
 45e:	0b be       	out	0x3b, r0	; 59
 460:	0f 90       	pop	r0
 462:	0f be       	out	0x3f, r0	; 63
 464:	0f 90       	pop	r0
 466:	1f 90       	pop	r1
 468:	18 95       	reti

0000046a <__vector_36>:
volatile uint8_t _usartRxTmp;
ISR(USART1_RX_vect)//cette interruption est semblable a la derniere mais celle ci gere la reception des donnes du atmega32u4 en mettant les valeurs du rx buffer dans UDR1.
{
 46a:	1f 92       	push	r1
 46c:	0f 92       	push	r0
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	0f 92       	push	r0
 472:	11 24       	eor	r1, r1
 474:	0b b6       	in	r0, 0x3b	; 59
 476:	0f 92       	push	r0
 478:	8f 93       	push	r24
 47a:	9f 93       	push	r25
 47c:	ef 93       	push	r30
 47e:	ff 93       	push	r31
	_usartRxTmp = UDR1;
 480:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 484:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <_usartRxTmp>
	if(rxCnt<RX_BUFFER_SIZE)
 488:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rxCnt>
 48c:	88 23       	and	r24, r24
 48e:	ac f0       	brlt	.+42     	; 0x4ba <__vector_36+0x50>
	{
		rxBuffer[rxBufferIn++] = _usartRxTmp;//recoit les valeurs en reception et les met dans le regisre UDR1
 490:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <rxBufferIn>
 494:	91 e0       	ldi	r25, 0x01	; 1
 496:	9e 0f       	add	r25, r30
 498:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <rxBufferIn>
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <_usartRxTmp>
 4a2:	e6 5b       	subi	r30, 0xB6	; 182
 4a4:	fd 4f       	sbci	r31, 0xFD	; 253
 4a6:	90 83       	st	Z, r25
		rxCnt++;
 4a8:	8f 5f       	subi	r24, 0xFF	; 255
 4aa:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <rxCnt>
		if(rxBufferIn >= RX_BUFFER_SIZE)//Si le buffer de reception est plein le buffer se met a 0
 4ae:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <rxBufferIn>
 4b2:	88 23       	and	r24, r24
 4b4:	14 f4       	brge	.+4      	; 0x4ba <__vector_36+0x50>
			rxBufferIn = 0;
 4b6:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <rxBufferIn>
	}
	
 4ba:	ff 91       	pop	r31
 4bc:	ef 91       	pop	r30
 4be:	9f 91       	pop	r25
 4c0:	8f 91       	pop	r24
 4c2:	0f 90       	pop	r0
 4c4:	0b be       	out	0x3b, r0	; 59
 4c6:	0f 90       	pop	r0
 4c8:	0f be       	out	0x3f, r0	; 63
 4ca:	0f 90       	pop	r0
 4cc:	1f 90       	pop	r1
 4ce:	18 95       	reti

000004d0 <__subsf3>:
 4d0:	50 58       	subi	r21, 0x80	; 128

000004d2 <__addsf3>:
 4d2:	bb 27       	eor	r27, r27
 4d4:	aa 27       	eor	r26, r26
 4d6:	0e d0       	rcall	.+28     	; 0x4f4 <__addsf3x>
 4d8:	48 c1       	rjmp	.+656    	; 0x76a <__fp_round>
 4da:	39 d1       	rcall	.+626    	; 0x74e <__fp_pscA>
 4dc:	30 f0       	brcs	.+12     	; 0x4ea <__addsf3+0x18>
 4de:	3e d1       	rcall	.+636    	; 0x75c <__fp_pscB>
 4e0:	20 f0       	brcs	.+8      	; 0x4ea <__addsf3+0x18>
 4e2:	31 f4       	brne	.+12     	; 0x4f0 <__addsf3+0x1e>
 4e4:	9f 3f       	cpi	r25, 0xFF	; 255
 4e6:	11 f4       	brne	.+4      	; 0x4ec <__addsf3+0x1a>
 4e8:	1e f4       	brtc	.+6      	; 0x4f0 <__addsf3+0x1e>
 4ea:	2e c1       	rjmp	.+604    	; 0x748 <__fp_nan>
 4ec:	0e f4       	brtc	.+2      	; 0x4f0 <__addsf3+0x1e>
 4ee:	e0 95       	com	r30
 4f0:	e7 fb       	bst	r30, 7
 4f2:	24 c1       	rjmp	.+584    	; 0x73c <__fp_inf>

000004f4 <__addsf3x>:
 4f4:	e9 2f       	mov	r30, r25
 4f6:	4a d1       	rcall	.+660    	; 0x78c <__fp_split3>
 4f8:	80 f3       	brcs	.-32     	; 0x4da <__addsf3+0x8>
 4fa:	ba 17       	cp	r27, r26
 4fc:	62 07       	cpc	r22, r18
 4fe:	73 07       	cpc	r23, r19
 500:	84 07       	cpc	r24, r20
 502:	95 07       	cpc	r25, r21
 504:	18 f0       	brcs	.+6      	; 0x50c <__addsf3x+0x18>
 506:	71 f4       	brne	.+28     	; 0x524 <__addsf3x+0x30>
 508:	9e f5       	brtc	.+102    	; 0x570 <__addsf3x+0x7c>
 50a:	62 c1       	rjmp	.+708    	; 0x7d0 <__fp_zero>
 50c:	0e f4       	brtc	.+2      	; 0x510 <__addsf3x+0x1c>
 50e:	e0 95       	com	r30
 510:	0b 2e       	mov	r0, r27
 512:	ba 2f       	mov	r27, r26
 514:	a0 2d       	mov	r26, r0
 516:	0b 01       	movw	r0, r22
 518:	b9 01       	movw	r22, r18
 51a:	90 01       	movw	r18, r0
 51c:	0c 01       	movw	r0, r24
 51e:	ca 01       	movw	r24, r20
 520:	a0 01       	movw	r20, r0
 522:	11 24       	eor	r1, r1
 524:	ff 27       	eor	r31, r31
 526:	59 1b       	sub	r21, r25
 528:	99 f0       	breq	.+38     	; 0x550 <__addsf3x+0x5c>
 52a:	59 3f       	cpi	r21, 0xF9	; 249
 52c:	50 f4       	brcc	.+20     	; 0x542 <__addsf3x+0x4e>
 52e:	50 3e       	cpi	r21, 0xE0	; 224
 530:	68 f1       	brcs	.+90     	; 0x58c <__addsf3x+0x98>
 532:	1a 16       	cp	r1, r26
 534:	f0 40       	sbci	r31, 0x00	; 0
 536:	a2 2f       	mov	r26, r18
 538:	23 2f       	mov	r18, r19
 53a:	34 2f       	mov	r19, r20
 53c:	44 27       	eor	r20, r20
 53e:	58 5f       	subi	r21, 0xF8	; 248
 540:	f3 cf       	rjmp	.-26     	; 0x528 <__addsf3x+0x34>
 542:	46 95       	lsr	r20
 544:	37 95       	ror	r19
 546:	27 95       	ror	r18
 548:	a7 95       	ror	r26
 54a:	f0 40       	sbci	r31, 0x00	; 0
 54c:	53 95       	inc	r21
 54e:	c9 f7       	brne	.-14     	; 0x542 <__addsf3x+0x4e>
 550:	7e f4       	brtc	.+30     	; 0x570 <__addsf3x+0x7c>
 552:	1f 16       	cp	r1, r31
 554:	ba 0b       	sbc	r27, r26
 556:	62 0b       	sbc	r22, r18
 558:	73 0b       	sbc	r23, r19
 55a:	84 0b       	sbc	r24, r20
 55c:	ba f0       	brmi	.+46     	; 0x58c <__addsf3x+0x98>
 55e:	91 50       	subi	r25, 0x01	; 1
 560:	a1 f0       	breq	.+40     	; 0x58a <__addsf3x+0x96>
 562:	ff 0f       	add	r31, r31
 564:	bb 1f       	adc	r27, r27
 566:	66 1f       	adc	r22, r22
 568:	77 1f       	adc	r23, r23
 56a:	88 1f       	adc	r24, r24
 56c:	c2 f7       	brpl	.-16     	; 0x55e <__addsf3x+0x6a>
 56e:	0e c0       	rjmp	.+28     	; 0x58c <__addsf3x+0x98>
 570:	ba 0f       	add	r27, r26
 572:	62 1f       	adc	r22, r18
 574:	73 1f       	adc	r23, r19
 576:	84 1f       	adc	r24, r20
 578:	48 f4       	brcc	.+18     	; 0x58c <__addsf3x+0x98>
 57a:	87 95       	ror	r24
 57c:	77 95       	ror	r23
 57e:	67 95       	ror	r22
 580:	b7 95       	ror	r27
 582:	f7 95       	ror	r31
 584:	9e 3f       	cpi	r25, 0xFE	; 254
 586:	08 f0       	brcs	.+2      	; 0x58a <__addsf3x+0x96>
 588:	b3 cf       	rjmp	.-154    	; 0x4f0 <__addsf3+0x1e>
 58a:	93 95       	inc	r25
 58c:	88 0f       	add	r24, r24
 58e:	08 f0       	brcs	.+2      	; 0x592 <__addsf3x+0x9e>
 590:	99 27       	eor	r25, r25
 592:	ee 0f       	add	r30, r30
 594:	97 95       	ror	r25
 596:	87 95       	ror	r24
 598:	08 95       	ret

0000059a <__divsf3>:
 59a:	0c d0       	rcall	.+24     	; 0x5b4 <__divsf3x>
 59c:	e6 c0       	rjmp	.+460    	; 0x76a <__fp_round>
 59e:	de d0       	rcall	.+444    	; 0x75c <__fp_pscB>
 5a0:	40 f0       	brcs	.+16     	; 0x5b2 <__divsf3+0x18>
 5a2:	d5 d0       	rcall	.+426    	; 0x74e <__fp_pscA>
 5a4:	30 f0       	brcs	.+12     	; 0x5b2 <__divsf3+0x18>
 5a6:	21 f4       	brne	.+8      	; 0x5b0 <__divsf3+0x16>
 5a8:	5f 3f       	cpi	r21, 0xFF	; 255
 5aa:	19 f0       	breq	.+6      	; 0x5b2 <__divsf3+0x18>
 5ac:	c7 c0       	rjmp	.+398    	; 0x73c <__fp_inf>
 5ae:	51 11       	cpse	r21, r1
 5b0:	10 c1       	rjmp	.+544    	; 0x7d2 <__fp_szero>
 5b2:	ca c0       	rjmp	.+404    	; 0x748 <__fp_nan>

000005b4 <__divsf3x>:
 5b4:	eb d0       	rcall	.+470    	; 0x78c <__fp_split3>
 5b6:	98 f3       	brcs	.-26     	; 0x59e <__divsf3+0x4>

000005b8 <__divsf3_pse>:
 5b8:	99 23       	and	r25, r25
 5ba:	c9 f3       	breq	.-14     	; 0x5ae <__divsf3+0x14>
 5bc:	55 23       	and	r21, r21
 5be:	b1 f3       	breq	.-20     	; 0x5ac <__divsf3+0x12>
 5c0:	95 1b       	sub	r25, r21
 5c2:	55 0b       	sbc	r21, r21
 5c4:	bb 27       	eor	r27, r27
 5c6:	aa 27       	eor	r26, r26
 5c8:	62 17       	cp	r22, r18
 5ca:	73 07       	cpc	r23, r19
 5cc:	84 07       	cpc	r24, r20
 5ce:	38 f0       	brcs	.+14     	; 0x5de <__divsf3_pse+0x26>
 5d0:	9f 5f       	subi	r25, 0xFF	; 255
 5d2:	5f 4f       	sbci	r21, 0xFF	; 255
 5d4:	22 0f       	add	r18, r18
 5d6:	33 1f       	adc	r19, r19
 5d8:	44 1f       	adc	r20, r20
 5da:	aa 1f       	adc	r26, r26
 5dc:	a9 f3       	breq	.-22     	; 0x5c8 <__divsf3_pse+0x10>
 5de:	33 d0       	rcall	.+102    	; 0x646 <__divsf3_pse+0x8e>
 5e0:	0e 2e       	mov	r0, r30
 5e2:	3a f0       	brmi	.+14     	; 0x5f2 <__divsf3_pse+0x3a>
 5e4:	e0 e8       	ldi	r30, 0x80	; 128
 5e6:	30 d0       	rcall	.+96     	; 0x648 <__divsf3_pse+0x90>
 5e8:	91 50       	subi	r25, 0x01	; 1
 5ea:	50 40       	sbci	r21, 0x00	; 0
 5ec:	e6 95       	lsr	r30
 5ee:	00 1c       	adc	r0, r0
 5f0:	ca f7       	brpl	.-14     	; 0x5e4 <__divsf3_pse+0x2c>
 5f2:	29 d0       	rcall	.+82     	; 0x646 <__divsf3_pse+0x8e>
 5f4:	fe 2f       	mov	r31, r30
 5f6:	27 d0       	rcall	.+78     	; 0x646 <__divsf3_pse+0x8e>
 5f8:	66 0f       	add	r22, r22
 5fa:	77 1f       	adc	r23, r23
 5fc:	88 1f       	adc	r24, r24
 5fe:	bb 1f       	adc	r27, r27
 600:	26 17       	cp	r18, r22
 602:	37 07       	cpc	r19, r23
 604:	48 07       	cpc	r20, r24
 606:	ab 07       	cpc	r26, r27
 608:	b0 e8       	ldi	r27, 0x80	; 128
 60a:	09 f0       	breq	.+2      	; 0x60e <__divsf3_pse+0x56>
 60c:	bb 0b       	sbc	r27, r27
 60e:	80 2d       	mov	r24, r0
 610:	bf 01       	movw	r22, r30
 612:	ff 27       	eor	r31, r31
 614:	93 58       	subi	r25, 0x83	; 131
 616:	5f 4f       	sbci	r21, 0xFF	; 255
 618:	2a f0       	brmi	.+10     	; 0x624 <__divsf3_pse+0x6c>
 61a:	9e 3f       	cpi	r25, 0xFE	; 254
 61c:	51 05       	cpc	r21, r1
 61e:	68 f0       	brcs	.+26     	; 0x63a <__divsf3_pse+0x82>
 620:	8d c0       	rjmp	.+282    	; 0x73c <__fp_inf>
 622:	d7 c0       	rjmp	.+430    	; 0x7d2 <__fp_szero>
 624:	5f 3f       	cpi	r21, 0xFF	; 255
 626:	ec f3       	brlt	.-6      	; 0x622 <__divsf3_pse+0x6a>
 628:	98 3e       	cpi	r25, 0xE8	; 232
 62a:	dc f3       	brlt	.-10     	; 0x622 <__divsf3_pse+0x6a>
 62c:	86 95       	lsr	r24
 62e:	77 95       	ror	r23
 630:	67 95       	ror	r22
 632:	b7 95       	ror	r27
 634:	f7 95       	ror	r31
 636:	9f 5f       	subi	r25, 0xFF	; 255
 638:	c9 f7       	brne	.-14     	; 0x62c <__divsf3_pse+0x74>
 63a:	88 0f       	add	r24, r24
 63c:	91 1d       	adc	r25, r1
 63e:	96 95       	lsr	r25
 640:	87 95       	ror	r24
 642:	97 f9       	bld	r25, 7
 644:	08 95       	ret
 646:	e1 e0       	ldi	r30, 0x01	; 1
 648:	66 0f       	add	r22, r22
 64a:	77 1f       	adc	r23, r23
 64c:	88 1f       	adc	r24, r24
 64e:	bb 1f       	adc	r27, r27
 650:	62 17       	cp	r22, r18
 652:	73 07       	cpc	r23, r19
 654:	84 07       	cpc	r24, r20
 656:	ba 07       	cpc	r27, r26
 658:	20 f0       	brcs	.+8      	; 0x662 <__divsf3_pse+0xaa>
 65a:	62 1b       	sub	r22, r18
 65c:	73 0b       	sbc	r23, r19
 65e:	84 0b       	sbc	r24, r20
 660:	ba 0b       	sbc	r27, r26
 662:	ee 1f       	adc	r30, r30
 664:	88 f7       	brcc	.-30     	; 0x648 <__divsf3_pse+0x90>
 666:	e0 95       	com	r30
 668:	08 95       	ret

0000066a <__fixunssfsi>:
 66a:	98 d0       	rcall	.+304    	; 0x79c <__fp_splitA>
 66c:	88 f0       	brcs	.+34     	; 0x690 <__fixunssfsi+0x26>
 66e:	9f 57       	subi	r25, 0x7F	; 127
 670:	90 f0       	brcs	.+36     	; 0x696 <__fixunssfsi+0x2c>
 672:	b9 2f       	mov	r27, r25
 674:	99 27       	eor	r25, r25
 676:	b7 51       	subi	r27, 0x17	; 23
 678:	a0 f0       	brcs	.+40     	; 0x6a2 <__fixunssfsi+0x38>
 67a:	d1 f0       	breq	.+52     	; 0x6b0 <__fixunssfsi+0x46>
 67c:	66 0f       	add	r22, r22
 67e:	77 1f       	adc	r23, r23
 680:	88 1f       	adc	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	1a f0       	brmi	.+6      	; 0x68c <__fixunssfsi+0x22>
 686:	ba 95       	dec	r27
 688:	c9 f7       	brne	.-14     	; 0x67c <__fixunssfsi+0x12>
 68a:	12 c0       	rjmp	.+36     	; 0x6b0 <__fixunssfsi+0x46>
 68c:	b1 30       	cpi	r27, 0x01	; 1
 68e:	81 f0       	breq	.+32     	; 0x6b0 <__fixunssfsi+0x46>
 690:	9f d0       	rcall	.+318    	; 0x7d0 <__fp_zero>
 692:	b1 e0       	ldi	r27, 0x01	; 1
 694:	08 95       	ret
 696:	9c c0       	rjmp	.+312    	; 0x7d0 <__fp_zero>
 698:	67 2f       	mov	r22, r23
 69a:	78 2f       	mov	r23, r24
 69c:	88 27       	eor	r24, r24
 69e:	b8 5f       	subi	r27, 0xF8	; 248
 6a0:	39 f0       	breq	.+14     	; 0x6b0 <__fixunssfsi+0x46>
 6a2:	b9 3f       	cpi	r27, 0xF9	; 249
 6a4:	cc f3       	brlt	.-14     	; 0x698 <__fixunssfsi+0x2e>
 6a6:	86 95       	lsr	r24
 6a8:	77 95       	ror	r23
 6aa:	67 95       	ror	r22
 6ac:	b3 95       	inc	r27
 6ae:	d9 f7       	brne	.-10     	; 0x6a6 <__fixunssfsi+0x3c>
 6b0:	3e f4       	brtc	.+14     	; 0x6c0 <__fixunssfsi+0x56>
 6b2:	90 95       	com	r25
 6b4:	80 95       	com	r24
 6b6:	70 95       	com	r23
 6b8:	61 95       	neg	r22
 6ba:	7f 4f       	sbci	r23, 0xFF	; 255
 6bc:	8f 4f       	sbci	r24, 0xFF	; 255
 6be:	9f 4f       	sbci	r25, 0xFF	; 255
 6c0:	08 95       	ret

000006c2 <__floatunsisf>:
 6c2:	e8 94       	clt
 6c4:	09 c0       	rjmp	.+18     	; 0x6d8 <__floatsisf+0x12>

000006c6 <__floatsisf>:
 6c6:	97 fb       	bst	r25, 7
 6c8:	3e f4       	brtc	.+14     	; 0x6d8 <__floatsisf+0x12>
 6ca:	90 95       	com	r25
 6cc:	80 95       	com	r24
 6ce:	70 95       	com	r23
 6d0:	61 95       	neg	r22
 6d2:	7f 4f       	sbci	r23, 0xFF	; 255
 6d4:	8f 4f       	sbci	r24, 0xFF	; 255
 6d6:	9f 4f       	sbci	r25, 0xFF	; 255
 6d8:	99 23       	and	r25, r25
 6da:	a9 f0       	breq	.+42     	; 0x706 <__floatsisf+0x40>
 6dc:	f9 2f       	mov	r31, r25
 6de:	96 e9       	ldi	r25, 0x96	; 150
 6e0:	bb 27       	eor	r27, r27
 6e2:	93 95       	inc	r25
 6e4:	f6 95       	lsr	r31
 6e6:	87 95       	ror	r24
 6e8:	77 95       	ror	r23
 6ea:	67 95       	ror	r22
 6ec:	b7 95       	ror	r27
 6ee:	f1 11       	cpse	r31, r1
 6f0:	f8 cf       	rjmp	.-16     	; 0x6e2 <__floatsisf+0x1c>
 6f2:	fa f4       	brpl	.+62     	; 0x732 <__floatsisf+0x6c>
 6f4:	bb 0f       	add	r27, r27
 6f6:	11 f4       	brne	.+4      	; 0x6fc <__floatsisf+0x36>
 6f8:	60 ff       	sbrs	r22, 0
 6fa:	1b c0       	rjmp	.+54     	; 0x732 <__floatsisf+0x6c>
 6fc:	6f 5f       	subi	r22, 0xFF	; 255
 6fe:	7f 4f       	sbci	r23, 0xFF	; 255
 700:	8f 4f       	sbci	r24, 0xFF	; 255
 702:	9f 4f       	sbci	r25, 0xFF	; 255
 704:	16 c0       	rjmp	.+44     	; 0x732 <__floatsisf+0x6c>
 706:	88 23       	and	r24, r24
 708:	11 f0       	breq	.+4      	; 0x70e <__floatsisf+0x48>
 70a:	96 e9       	ldi	r25, 0x96	; 150
 70c:	11 c0       	rjmp	.+34     	; 0x730 <__floatsisf+0x6a>
 70e:	77 23       	and	r23, r23
 710:	21 f0       	breq	.+8      	; 0x71a <__floatsisf+0x54>
 712:	9e e8       	ldi	r25, 0x8E	; 142
 714:	87 2f       	mov	r24, r23
 716:	76 2f       	mov	r23, r22
 718:	05 c0       	rjmp	.+10     	; 0x724 <__floatsisf+0x5e>
 71a:	66 23       	and	r22, r22
 71c:	71 f0       	breq	.+28     	; 0x73a <__floatsisf+0x74>
 71e:	96 e8       	ldi	r25, 0x86	; 134
 720:	86 2f       	mov	r24, r22
 722:	70 e0       	ldi	r23, 0x00	; 0
 724:	60 e0       	ldi	r22, 0x00	; 0
 726:	2a f0       	brmi	.+10     	; 0x732 <__floatsisf+0x6c>
 728:	9a 95       	dec	r25
 72a:	66 0f       	add	r22, r22
 72c:	77 1f       	adc	r23, r23
 72e:	88 1f       	adc	r24, r24
 730:	da f7       	brpl	.-10     	; 0x728 <__floatsisf+0x62>
 732:	88 0f       	add	r24, r24
 734:	96 95       	lsr	r25
 736:	87 95       	ror	r24
 738:	97 f9       	bld	r25, 7
 73a:	08 95       	ret

0000073c <__fp_inf>:
 73c:	97 f9       	bld	r25, 7
 73e:	9f 67       	ori	r25, 0x7F	; 127
 740:	80 e8       	ldi	r24, 0x80	; 128
 742:	70 e0       	ldi	r23, 0x00	; 0
 744:	60 e0       	ldi	r22, 0x00	; 0
 746:	08 95       	ret

00000748 <__fp_nan>:
 748:	9f ef       	ldi	r25, 0xFF	; 255
 74a:	80 ec       	ldi	r24, 0xC0	; 192
 74c:	08 95       	ret

0000074e <__fp_pscA>:
 74e:	00 24       	eor	r0, r0
 750:	0a 94       	dec	r0
 752:	16 16       	cp	r1, r22
 754:	17 06       	cpc	r1, r23
 756:	18 06       	cpc	r1, r24
 758:	09 06       	cpc	r0, r25
 75a:	08 95       	ret

0000075c <__fp_pscB>:
 75c:	00 24       	eor	r0, r0
 75e:	0a 94       	dec	r0
 760:	12 16       	cp	r1, r18
 762:	13 06       	cpc	r1, r19
 764:	14 06       	cpc	r1, r20
 766:	05 06       	cpc	r0, r21
 768:	08 95       	ret

0000076a <__fp_round>:
 76a:	09 2e       	mov	r0, r25
 76c:	03 94       	inc	r0
 76e:	00 0c       	add	r0, r0
 770:	11 f4       	brne	.+4      	; 0x776 <__fp_round+0xc>
 772:	88 23       	and	r24, r24
 774:	52 f0       	brmi	.+20     	; 0x78a <__fp_round+0x20>
 776:	bb 0f       	add	r27, r27
 778:	40 f4       	brcc	.+16     	; 0x78a <__fp_round+0x20>
 77a:	bf 2b       	or	r27, r31
 77c:	11 f4       	brne	.+4      	; 0x782 <__fp_round+0x18>
 77e:	60 ff       	sbrs	r22, 0
 780:	04 c0       	rjmp	.+8      	; 0x78a <__fp_round+0x20>
 782:	6f 5f       	subi	r22, 0xFF	; 255
 784:	7f 4f       	sbci	r23, 0xFF	; 255
 786:	8f 4f       	sbci	r24, 0xFF	; 255
 788:	9f 4f       	sbci	r25, 0xFF	; 255
 78a:	08 95       	ret

0000078c <__fp_split3>:
 78c:	57 fd       	sbrc	r21, 7
 78e:	90 58       	subi	r25, 0x80	; 128
 790:	44 0f       	add	r20, r20
 792:	55 1f       	adc	r21, r21
 794:	59 f0       	breq	.+22     	; 0x7ac <__fp_splitA+0x10>
 796:	5f 3f       	cpi	r21, 0xFF	; 255
 798:	71 f0       	breq	.+28     	; 0x7b6 <__fp_splitA+0x1a>
 79a:	47 95       	ror	r20

0000079c <__fp_splitA>:
 79c:	88 0f       	add	r24, r24
 79e:	97 fb       	bst	r25, 7
 7a0:	99 1f       	adc	r25, r25
 7a2:	61 f0       	breq	.+24     	; 0x7bc <__fp_splitA+0x20>
 7a4:	9f 3f       	cpi	r25, 0xFF	; 255
 7a6:	79 f0       	breq	.+30     	; 0x7c6 <__fp_splitA+0x2a>
 7a8:	87 95       	ror	r24
 7aa:	08 95       	ret
 7ac:	12 16       	cp	r1, r18
 7ae:	13 06       	cpc	r1, r19
 7b0:	14 06       	cpc	r1, r20
 7b2:	55 1f       	adc	r21, r21
 7b4:	f2 cf       	rjmp	.-28     	; 0x79a <__fp_split3+0xe>
 7b6:	46 95       	lsr	r20
 7b8:	f1 df       	rcall	.-30     	; 0x79c <__fp_splitA>
 7ba:	08 c0       	rjmp	.+16     	; 0x7cc <__fp_splitA+0x30>
 7bc:	16 16       	cp	r1, r22
 7be:	17 06       	cpc	r1, r23
 7c0:	18 06       	cpc	r1, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	f1 cf       	rjmp	.-30     	; 0x7a8 <__fp_splitA+0xc>
 7c6:	86 95       	lsr	r24
 7c8:	71 05       	cpc	r23, r1
 7ca:	61 05       	cpc	r22, r1
 7cc:	08 94       	sec
 7ce:	08 95       	ret

000007d0 <__fp_zero>:
 7d0:	e8 94       	clt

000007d2 <__fp_szero>:
 7d2:	bb 27       	eor	r27, r27
 7d4:	66 27       	eor	r22, r22
 7d6:	77 27       	eor	r23, r23
 7d8:	cb 01       	movw	r24, r22
 7da:	97 f9       	bld	r25, 7
 7dc:	08 95       	ret

000007de <__mulsf3>:
 7de:	0b d0       	rcall	.+22     	; 0x7f6 <__mulsf3x>
 7e0:	c4 cf       	rjmp	.-120    	; 0x76a <__fp_round>
 7e2:	b5 df       	rcall	.-150    	; 0x74e <__fp_pscA>
 7e4:	28 f0       	brcs	.+10     	; 0x7f0 <__mulsf3+0x12>
 7e6:	ba df       	rcall	.-140    	; 0x75c <__fp_pscB>
 7e8:	18 f0       	brcs	.+6      	; 0x7f0 <__mulsf3+0x12>
 7ea:	95 23       	and	r25, r21
 7ec:	09 f0       	breq	.+2      	; 0x7f0 <__mulsf3+0x12>
 7ee:	a6 cf       	rjmp	.-180    	; 0x73c <__fp_inf>
 7f0:	ab cf       	rjmp	.-170    	; 0x748 <__fp_nan>
 7f2:	11 24       	eor	r1, r1
 7f4:	ee cf       	rjmp	.-36     	; 0x7d2 <__fp_szero>

000007f6 <__mulsf3x>:
 7f6:	ca df       	rcall	.-108    	; 0x78c <__fp_split3>
 7f8:	a0 f3       	brcs	.-24     	; 0x7e2 <__mulsf3+0x4>

000007fa <__mulsf3_pse>:
 7fa:	95 9f       	mul	r25, r21
 7fc:	d1 f3       	breq	.-12     	; 0x7f2 <__mulsf3+0x14>
 7fe:	95 0f       	add	r25, r21
 800:	50 e0       	ldi	r21, 0x00	; 0
 802:	55 1f       	adc	r21, r21
 804:	62 9f       	mul	r22, r18
 806:	f0 01       	movw	r30, r0
 808:	72 9f       	mul	r23, r18
 80a:	bb 27       	eor	r27, r27
 80c:	f0 0d       	add	r31, r0
 80e:	b1 1d       	adc	r27, r1
 810:	63 9f       	mul	r22, r19
 812:	aa 27       	eor	r26, r26
 814:	f0 0d       	add	r31, r0
 816:	b1 1d       	adc	r27, r1
 818:	aa 1f       	adc	r26, r26
 81a:	64 9f       	mul	r22, r20
 81c:	66 27       	eor	r22, r22
 81e:	b0 0d       	add	r27, r0
 820:	a1 1d       	adc	r26, r1
 822:	66 1f       	adc	r22, r22
 824:	82 9f       	mul	r24, r18
 826:	22 27       	eor	r18, r18
 828:	b0 0d       	add	r27, r0
 82a:	a1 1d       	adc	r26, r1
 82c:	62 1f       	adc	r22, r18
 82e:	73 9f       	mul	r23, r19
 830:	b0 0d       	add	r27, r0
 832:	a1 1d       	adc	r26, r1
 834:	62 1f       	adc	r22, r18
 836:	83 9f       	mul	r24, r19
 838:	a0 0d       	add	r26, r0
 83a:	61 1d       	adc	r22, r1
 83c:	22 1f       	adc	r18, r18
 83e:	74 9f       	mul	r23, r20
 840:	33 27       	eor	r19, r19
 842:	a0 0d       	add	r26, r0
 844:	61 1d       	adc	r22, r1
 846:	23 1f       	adc	r18, r19
 848:	84 9f       	mul	r24, r20
 84a:	60 0d       	add	r22, r0
 84c:	21 1d       	adc	r18, r1
 84e:	82 2f       	mov	r24, r18
 850:	76 2f       	mov	r23, r22
 852:	6a 2f       	mov	r22, r26
 854:	11 24       	eor	r1, r1
 856:	9f 57       	subi	r25, 0x7F	; 127
 858:	50 40       	sbci	r21, 0x00	; 0
 85a:	8a f0       	brmi	.+34     	; 0x87e <__mulsf3_pse+0x84>
 85c:	e1 f0       	breq	.+56     	; 0x896 <__mulsf3_pse+0x9c>
 85e:	88 23       	and	r24, r24
 860:	4a f0       	brmi	.+18     	; 0x874 <__mulsf3_pse+0x7a>
 862:	ee 0f       	add	r30, r30
 864:	ff 1f       	adc	r31, r31
 866:	bb 1f       	adc	r27, r27
 868:	66 1f       	adc	r22, r22
 86a:	77 1f       	adc	r23, r23
 86c:	88 1f       	adc	r24, r24
 86e:	91 50       	subi	r25, 0x01	; 1
 870:	50 40       	sbci	r21, 0x00	; 0
 872:	a9 f7       	brne	.-22     	; 0x85e <__mulsf3_pse+0x64>
 874:	9e 3f       	cpi	r25, 0xFE	; 254
 876:	51 05       	cpc	r21, r1
 878:	70 f0       	brcs	.+28     	; 0x896 <__mulsf3_pse+0x9c>
 87a:	60 cf       	rjmp	.-320    	; 0x73c <__fp_inf>
 87c:	aa cf       	rjmp	.-172    	; 0x7d2 <__fp_szero>
 87e:	5f 3f       	cpi	r21, 0xFF	; 255
 880:	ec f3       	brlt	.-6      	; 0x87c <__mulsf3_pse+0x82>
 882:	98 3e       	cpi	r25, 0xE8	; 232
 884:	dc f3       	brlt	.-10     	; 0x87c <__mulsf3_pse+0x82>
 886:	86 95       	lsr	r24
 888:	77 95       	ror	r23
 88a:	67 95       	ror	r22
 88c:	b7 95       	ror	r27
 88e:	f7 95       	ror	r31
 890:	e7 95       	ror	r30
 892:	9f 5f       	subi	r25, 0xFF	; 255
 894:	c1 f7       	brne	.-16     	; 0x886 <__mulsf3_pse+0x8c>
 896:	fe 2b       	or	r31, r30
 898:	88 0f       	add	r24, r24
 89a:	91 1d       	adc	r25, r1
 89c:	96 95       	lsr	r25
 89e:	87 95       	ror	r24
 8a0:	97 f9       	bld	r25, 7
 8a2:	08 95       	ret

000008a4 <_exit>:
 8a4:	f8 94       	cli

000008a6 <__stop_program>:
 8a6:	ff cf       	rjmp	.-2      	; 0x8a6 <__stop_program>
