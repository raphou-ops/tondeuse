<!DOCTYPE html>
<html lang="fr">

<head>
    <%- include('../partials/head') %>
</head>

<script>
    "use strict";
    let map;
    let drawingManager;
    let selectedShape;
    let selectedColor;
    let missionPolygon;
    let missionPathPolyline;
    const colors = ['#1E90FF', '#FF1493', '#32CD32', '#FF8C00', '#4B0082'];
    let polyOptions = {
        strokeWeight: 0,
        fillOpacity: 0.45,
        editable: true,
        draggable: true,
        fillColor: colors[0]
    };
    let startMarker;
    let bearingLine;
    let missionPathPolylineMarkers = [];
    let circleObstacles = new Set(); //Google maps circle obstacle objects
    let polyObstacles = new Set(); //Google maps circle polygon objects
    const R = 6371000; //Earth radius in meters
    const d = 1000; //Heading line distance in meters
    const baseURL = "https://precisionmule.com";
    //const baseURL: string = "http://localhost:8080";
    //Credit: https://blog.thecell.eu/blog/2017/11/12/customlines-for-google-maps-polylines/
    //https://developers.google.com/maps/documentation/javascript/reference?#IconSequence
    var iconsequ = [];
    //Wrapper type for passing around LatLong values and sending them (via JSON)
    //back and forth between the client and server
    class LL {
        constructor(lat, lng) {
            this.lat = 0;
            this.lng = 0;
            this.lat = lat;
            this.lng = lng;
        }
    }
    // SymbolPath https://developers.google.com/maps/documentation/javascript/reference?#SymbolPath
    const redCircle = {
        "path": "M -2,0 C -1.947018,-2.2209709 1.9520943,-2.1262691 2,0.00422057 2.0378955,1.3546185 1.5682108,2.0631345 1.4372396e-8,2.0560929 -1.7155482,2.0446854 -1.9145886,1.0142836 -2,0.06735507 Z",
        "fillColor": "#ff0000",
        "fillOpacity": 0.8,
        "strokeColor": "#ff0000",
        "strokeWeight": 30,
        "scale": 0.5
    };
    const greenCircle = {
        "path": "M -2,0 C -1.947018,-2.2209709 1.9520943,-2.1262691 2,0.00422057 2.0378955,1.3546185 1.5682108,2.0631345 1.4372396e-8,2.0560929 -1.7155482,2.0446854 -1.9145886,1.0142836 -2,0.06735507 Z",
        "fillColor": "#ff0000",
        "fillOpacity": 0.8,
        "strokeColor": "#008000",
        "strokeWeight": 30,
        "scale": 0.50
    };
    // add Point at the start of the Line
    iconsequ.push({
        icon: greenCircle,
        offset: "0%",
        repeat: "0"
    });
    // add Point at the end of the Line
    iconsequ.push({
        icon: redCircle,
        offset: "100%",
        repeat: "0"
    });
    //JSON local storage helper functions
    //credit: https://stackoverflow.com/questions/2010892/storing-objects-in-html5-localstorage?rq=1
    Storage.prototype.setObject = function (key, value) {
        this.setItem(key, JSON.stringify(value));
    };
    Storage.prototype.getObject = function (key) {
        var value = this.getItem(key);
        return value && JSON.parse(value);
    };
    //Functions for map geo math
    //credit: http://www.movable-type.co.uk/scripts/latlong.html#destPoint
    //Converts numeric degrees to radians
    if (typeof (Number.prototype.toRad) === "undefined") {
        Number.prototype.toRad = function () {
            return this * Math.PI / 180;
        };
    }
    //Converts radians to numeric (signed) degrees
    if (typeof (Number.prototype.toDeg) === "undefined") {
        Number.prototype.toDeg = function () {
            return this * 180 / Math.PI;
        };
    }
    // document.getElementById shorthand
    // credit: https://stackoverflow.com/questions/6398787/javascript-shorthand-for-getelementbyid
    let $ = function (id) { return document.getElementById(id); };
    /**
     * credit: https://stackoverflow.com/questions/10223898/draw-line-in-direction-given-distance-google-maps
     *
     * @param lat1 Latitude of starting point marker
     * @param lon1 Longitude of starting point marker
     * @param brng Mission bearing
     */
    function bearingLineEndpointCoords(lat1, lon1, brng) {
        lat1 = lat1.toRad();
        lon1 = lon1.toRad();
        brng = brng.toRad();
        let lat2 = Math.asin(Math.sin(lat1) * Math.cos(d / R) +
            Math.cos(lat1) * Math.sin(d / R) * Math.cos(brng));
        let lon2 = lon1 + Math.atan2(Math.sin(brng) * Math.sin(d / R) * Math.cos(lat1), Math.cos(d / R) - Math.sin(lat1) * Math.sin(lat2));
        return new LL(lat2.toDeg(), lon2.toDeg());
    }
    /**
     * Call this guy when heading text input changes -- checks
     * if input is a valid number and if so,
     * re-draws the bearing line
     *
     * @param val Heading value user enters in the heading input box
     */
    function headingOnInput(val) {
        if (!isNaN(val)) {
            setCookie("heading", `${val}`);
            if (startMarker != null && startMarker.getPosition() != null) {
                let nonNullPosition = startMarker.getPosition();
                drawBearingLine(nonNullPosition.lat(), nonNullPosition.lng(), parseFloat(val));
            }
            else {
                console.log("startMarker is null");
            }
        }
        else {
            console.log(`the heading specified (${val}) is not a number -- cannot draw a new heading line`);
        }
    }
    /**
     * Call this guy when path width text input changes -- saves path width
     *
     * @param val Heading value user enters in the heading input box
     */
    function pathWidthOnInput(val) {
        if (!isNaN(val)) {
            setCookie("pathWidth", `${val}`);
            console.log("saved path width to cookie");
        }
        else {
            console.log(`the path width specified (${val}) is not a number`);
        }
    }
    /**
     * Save the waypoints locally as an ArduPilot waypoint file
     *
     * @param filename Filename to save file locally as
     * @param text Contents of file
     */
    function download(filename, text) {
        var element = document.createElement('a');
        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
        element.setAttribute('download', filename);
        element.style.display = 'none';
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
    }
    /**
     * Sets up logic to allow user to upload a mission polygon file
     * into the app
     */
    function setupFileListener() {
        $('file').onchange = function () {
            var file = this.files[0];
            var reader = new FileReader();
            reader.onload = function (progressEvent) {
                // Entire file
                console.log(this.result);
                var userEnteredMapData = JSON.parse(this.result);
                loadPolygonFromUserMapDataRecord(userEnteredMapData);
            };
            reader.readAsText(file);
        };
        //This ensures the file will be imported in the event that
        //the user is re-uploading a file of the same name of the
        //file they just uploaded
        //credit: https://stackoverflow.com/questions/12030686/html-input-file-selection-event-not-firing-upon-selecting-the-same-file
        $('file').onclick = function () {
            this.value = null;
        };
    }
    /**
     * Initial map loading and setup
     */
    function initMap() {
        map = new google.maps.Map($('map'), {
            center: new google.maps.LatLng(45.644406753553454, -73.84288944545824),
            //position: google.maps.LatLng(45.64, -73.84),
            zoom: 2,
            mapTypeId: 'hybrid',
            tilt: 0,
            labels: true
        });
        setCustomZoom();
        addDrawingToolsToMap();
        loadMapLocationFromCookie();
        let headingNumber = parseFloat($('heading').value);
        addStartingLocationMarker(headingNumber);
        setupFileListener();
        let pathWidthCookieValue = getCookie("pathWidth");
        if (pathWidthCookieValue) {
            $('pathWidth').value = pathWidthCookieValue;
        }
        let headingCookieValue = getCookie("heading");
        if (headingCookieValue) {
            $('heading').value = headingCookieValue;
        }
    }
    /**
     * Increase the map zoom for fine-tuning mission location
     * Credit: https://stackoverflow.com/questions/30136525/allow-further-zoom-on-google-maps-v3-satellite-view?rq=1
     */
    function setCustomZoom() {
        let zoomRangeModifier = map.__proto__.__proto__.__proto__;
        let originalSetFunc = zoomRangeModifier.set;
        let hijackedSetFunc = function (a, b) {
            if (a === 'maxZoom') {
                b = 25;
            }
            originalSetFunc.call(this, a, b);
        };
        zoomRangeModifier.set = hijackedSetFunc;
    }
    /**
     * Map karate credit to Ilya Radchenko: http://bl.ocks.org/knownasilya/89a32e572989f0aff1f8
     */
    function clearSelection() {
        if (selectedShape) {
            if (selectedShape.type !== 'marker') {
                selectedShape.setEditable(false);
            }
            selectedShape = null;
        }
    }
    /**
     * Sets the selectedShape var that's used in other places and makes the shape
     * editable if it's not a marker
     *
     * @param shape Shape object to set as selected
     */
    function setSelection(shape) {
        if (shape.type !== 'marker') {
            clearSelection();
            shape.setEditable(true);
            //selectColor(shape.get('fillColor') || shape.get('strokeColor'));
        }
        selectedShape = shape;
    }
    /**
     * If the selected shape is the main mission polygon, present the user
     * a confirmation box just to ensure this is
     * what they'd wanted to do
     */
    function confirmDeleteSelectedShape() {
        if (selectedShape != null) {
            if (selectedShape == missionPolygon) {
                polyOptions.fillColor = '#CCCC00';
                missionPolygon.setOptions(polyOptions);
                setTimeout(confirmDeleteSelectedShapeAsync, 100);
            }
            else {
                deleteSelectedShape();
            }
        }
    }
    /**
     * Helper function for confirming because I was having trouble
     * getting the selected polygon to highlight without a
     * little wait before the js confirm dialog
     */
    function confirmDeleteSelectedShapeAsync() {
        var proceed = confirm("Main polygon is selected..are you sure?");
        polyOptions.fillColor = colors[0];
        missionPolygon.setOptions(polyOptions);
        if (proceed) {
            deleteSelectedShape();
        }
    }
    /**
     * Delete shape that is currently selected on map
     */
    function deleteSelectedShape() {
        if (selectedShape != null) {
            if (selectedShape == missionPolygon) {
                missionPolygon.setMap(null);
                drawingManager.setOptions({
                    drawingMode: google.maps.drawing.OverlayType.POLYGON,
                    drawingControl: true
                });
                if (missionPathPolyline != null) {
                    missionPathPolyline.setMap(null);
                }
            }
            else {
                if (circleObstacles.has(selectedShape)) {
                    circleObstacles.delete(selectedShape);
                }
                if (polyObstacles.has(selectedShape)) {
                    polyObstacles.delete(selectedShape);
                }
                selectedShape.setMap(null);
            }
        }
    }
    /**
     * Save the main mission polygon to local storage
     */
    function savePolygon() {
        var userEnteredMapData = mapUserEnteredMapDataAsBigHonkinHash(false);
        localStorage.setObject('userEnteredMapData', userEnteredMapData);
    }
    /**
     * Download the mission polygon to a local json file
     */
    function downloadPolygon() {
        if (missionPolygon) {
            var userEnteredMapData = mapUserEnteredMapDataAsBigHonkinHash(false);
            var userEnteredMapDataAsString = JSON.stringify(userEnteredMapData);
            download("polygon.json", userEnteredMapDataAsString);
        }
    }
    /**
     * Load mission polygon from polygon saved in localStorage
     */
    function loadSavedPolygon() {
        let userEnteredMapData = localStorage.getObject('userEnteredMapData');
        loadPolygonFromUserMapDataRecord(userEnteredMapData);
    }
    /**
     * Clears out the map data
     */
    function clearUserMapData() {
        circleObstacles.forEach(function (circle, i) {
            circle.setMap(null);
        });
        polyObstacles.forEach(function (poly, i) {
            poly.setMap(null);
        });
        if (missionPolygon) {
            missionPolygon.setMap(null);
        }
        if (missionPathPolyline) {
            missionPathPolyline.setMap(null);
        }
    }
    /**
     * Load mission data into visible google map
     *
     * @param userEnteredMapData Record<string, any> of coordinates representing the
     * main mission polygon, coordinates of the obstacles and marker,
     * and the path width and heading information
     */
    function loadPolygonFromUserMapDataRecord(userEnteredMapData) {
        clearUserMapData();
        let missionPolygonlls = userEnteredMapData['missionPolygon'];
        var pathMVCArray = new google.maps.MVCArray();
        if (missionPolygonlls) {
            for (var i = 0; i < missionPolygonlls.length; i++) {
                var obj = missionPolygonlls[i];
                pathMVCArray.push(new google.maps.LatLng(obj.lat, obj.lng));
            }
            missionPolygon = new google.maps.Polygon();
            missionPolygon.setOptions(polyOptions);
            missionPolygon.setPath(pathMVCArray);
            missionPolygon.setMap(map);
            drawingManager.setDrawingMode(null);
            drawingManager.setOptions({
                drawingControl: false
            });
            map.setOptions({ draggableCursor: '' });
            //addPolygonClickHandlers();
            // Add an event listener that selects the newly-drawn shape when the user
            // mouses down on it.
            google.maps.event.addListener(missionPolygon, 'click', function (e) {
                if (e.vertex !== undefined) {
                    var path = missionPolygon.getPaths().getAt(e.path);
                    path.removeAt(e.vertex);
                    if (path.getLength() < 3) {
                        missionPolygon.setMap(null);
                    }
                }
                setSelection(missionPolygon);
            });
        }
        let smLL = userEnteredMapData['startMarker'];
        startMarker.setPosition(new google.maps.LatLng(smLL.lat, smLL.lng));
        let headingVal = userEnteredMapData['heading'];
        let mowingPathWidthInMetersVal = userEnteredMapData['mowingPathWidthInMeters'];
        $('heading').value = headingVal;
        $('pathWidth').value = mowingPathWidthInMetersVal;
        headingOnInput(headingVal);
        let circleArray = userEnteredMapData['circleObstacles'];
        let polyArray = userEnteredMapData['polyObstacles'];
        circleObstacles = new Set();
        polyObstacles = new Set();
        circleArray.forEach(function (circle, i) {
            let radius = circle['radius'];
            let lat = circle['lat'];
            let lng = circle['lng'];
            addCircleObstacleOptions(radius, lat, lng);
        });
        polyArray.forEach(function (poly, i) {
            addPolyObstacleOptions(poly);
        });
    }
    /**
     * I'm not entirely sure if we actually still need this function
     *
     * @param color String hex color (i.e. '#1E90FF')
     */
    function selectColor(color) {
        selectedColor = color;
        // Retrieves the current options from the drawing manager and replaces the
        // stroke or fill color as appropriate.
        var polylineOptions = drawingManager.get('polylineOptions');
        polylineOptions.strokeColor = color;
        drawingManager.set('polylineOptions', polylineOptions);
        var rectangleOptions = drawingManager.get('rectangleOptions');
        rectangleOptions.fillColor = color;
        drawingManager.set('rectangleOptions', rectangleOptions);
        var circleOptions = drawingManager.get('circleOptions');
        circleOptions.fillColor = color;
        drawingManager.set('circleOptions', circleOptions);
        var polygonOptions = drawingManager.get('polygonOptions');
        polygonOptions.fillColor = color;
        drawingManager.set('polygonOptions', polygonOptions);
    }
    /**
     * Post all the mission data up to the server so that the server can build
     * the corresponding mission path
     *
     * @param truckLoadOfDataForServer Big stringified json object of data -- this
     * should probably be broken down into several parameters rather than this
     * big opaque key/value json obect we're currently rolling
     * @param mowingPathWidthInMeters Distance between waypoints
     */
    function postData(truckLoadOfDataForServer, mowingPathWidthInMeters) {
        fetch(baseURL + '/missionbuilder/api/buildMissionFromLatLngPoints?mowingPathWidthInMeters=' + mowingPathWidthInMeters, {
            method: 'POST',
            body: truckLoadOfDataForServer
        }).then((res) => res.json())
            .then((data) => addMissionPolylineToMap(data))
            .catch((err) => console.log("Whupps we have an error: " + err));
    }
    /**
     * Draw polyline on map representing the mission path
     *
     * @param jsonData Sequentially ordered array of ILL Latitude/Longitude values
     * representing all waypoints that comprise the mission -- in other words,
     * the first element of the array is the first point of the mission,
     * the second element is the next point the rover will navigate
     * to and so on 'till the last element in the array which is
     * the final waypoint of the mission path
     */
    function addMissionPolylineToMap(jsonData) {
        if (missionPathPolyline != null) {
            missionPathPolyline.setMap(null);
        }
        //Logging mission polyline for debugging
        console.log("Begin logging missionPathPolyline");
        for (var x = 0; x < jsonData.length; x++) {
            var latLng = jsonData[x];
            console.log(`${x} Latitude: ${latLng.lat} Longitude: ${latLng.lng}`);
        }
        console.log("End logging missionPathPolyline");
        missionPathPolyline = new google.maps.Polyline({
            path: jsonData,
            geodesic: true,
            strokeColor: '#008000',
            strokeOpacity: 1.0,
            strokeWeight: 2,
            editable: true,
            icons: iconsequ
        });
        google.maps.event.addListener(missionPathPolyline, "dragend", updateMissionPathPolylineMarkers);
        google.maps.event.addListener(missionPathPolyline.getPath(), "insert_at", updateMissionPathPolylineMarkers);
        google.maps.event.addListener(missionPathPolyline.getPath(), "remove_at", updateMissionPathPolylineMarkers);
        google.maps.event.addListener(missionPathPolyline.getPath(), "set_at", updateMissionPathPolylineMarkers);
        missionPathPolyline.setMap(map);
        updateMissionPathPolylineMarkers();
    }
    function updateMissionPathPolylineMarkers() {
        var path = missionPathPolyline.getPath();
        var len = path.getLength();
        for (var x = 0; x < missionPathPolylineMarkers.length; x++) {
            missionPathPolylineMarkers[x].setMap(null);
        }
        var checkbox = $('showWaypointNumbersCheckbox');
        if (checkbox.checked == true) {
            for (var i = 0; i < len; i++) {
                var marker = new google.maps.Marker({
                    position: path.getAt(i),
                    label: (i + 1).toString(),
                    draggable: true,
                    map: map
                });
                missionPathPolylineMarkers.push(marker);
                bindMarkerToMissionPathPolyline(marker, i);
            }
        }
    }
    /**
     * When user moves mission vertex marker, update the corresponding lat/lng
     * vertex on the mission polyline accordingly
     *
     * @param marker The marker to bind to
     * @param index Polyline index to replace lat/lng value of
     */
    function bindMarkerToMissionPathPolyline(marker, index) {
        google.maps.event.addListener(marker, 'dragend', function () {
            var newMarkerLatLng = marker.getPosition();
            var path = missionPathPolyline.getPath();
            path.setAt(index, new google.maps.LatLng(newMarkerLatLng.lat(), newMarkerLatLng.lng()));
        });
    }
    /**
     * Build a big ArduPilot mission waypoint string that the user will be able to
     * download as a file (and then load the file into their Flight Controller)
     *
     * @see https://mavlink.io/en/file_formats/ For more information
     * on the waypoint file format
     *
     * @param waypointMVCArray Array of LatLong points arranged sequentially: i.e.
     * the first item in the array is the first waypoint
     * and the last item is the last waypoint
     */
    function buildMissionWaypointString(waypointMVCArray) {
        var missionString = buildWaypointFileFirstLine() + "\n";
        for (var x = 0; x < waypointMVCArray.getLength(); x++) {
            var lat = waypointMVCArray.getAt(x).lat();
            var lng = waypointMVCArray.getAt(x).lng();
            if (x == 0) {
                //Add first line twice (i.e. to set first point as home)
                missionString += buildWaypointFileLatLngLine("C", (lat.toFixed(6)) * 1000000, (lng.toFixed(6)) * 1000000) + "\n";
            }
            missionString += buildWaypointFileLatLngLine("C", (lat.toFixed(6)) * 1000000, (lng.toFixed(6)) * 1000000) + "\n";
        }
        return missionString;
    }
    /**
     * Build the standard first line of the waypoint file
     */
    function buildWaypointFileFirstLine() {
        var header = "Auto Mower";
        return header;
    }
    /**
     * Build the standard waypoint line
     *
     * @param index Zero-based incrementing index that is the first element in the waypoint line format
     * (i.e. the first waypoint is 0, the next is 1 and so on)
     * @param lat Latitude
     * @param lng Longitude
     */
    function buildWaypointFileLatLngLine(index, lat, lng) {
        return index + "," + lat + "," + lng;
    }
    /**
     *
     */
    function addPolygonClickHandlers() {
        google.maps.event.addListener(drawingManager, 'overlaycomplete', function (e) {
            var newShape = e.overlay;
            newShape.type = e.type;
            if (e.type !== google.maps.drawing.OverlayType.MARKER) {
                // Switch back to non-drawing mode after drawing a shape.
                drawingManager.setDrawingMode(null);
                // Add an event listener that selects the newly-drawn shape when the user
                // mouses down on it.
                google.maps.event.addListener(newShape, 'click', function (e) {
                    if (e.vertex !== undefined) {
                        if (newShape.type === google.maps.drawing.OverlayType.POLYGON) {
                            var path = newShape.getPaths().getAt(e.path);
                            path.removeAt(e.vertex);
                            if (path.length < 3) {
                                newShape.setMap(null);
                            }
                        }
                        if (newShape.type === google.maps.drawing.OverlayType.POLYLINE) {
                            var path = newShape.getPath();
                            path.removeAt(e.vertex);
                            if (path.length < 2) {
                                newShape.setMap(null);
                            }
                        }
                    }
                    setSelection(newShape);
                });
                setSelection(newShape);
            }
            else {
                google.maps.event.addListener(newShape, 'click', function (e) {
                    setSelection(newShape);
                });
                setSelection(newShape);
            }
        });
    }
    /**
     * Add a generic polygon-shaped area to the center of the map -- the idea
     * is that users will move and reshape the polygon over
     * areas that they want their mower to avoid
     */
    function addPolyObstacle() {
        var polyCoords = [
            { lat: map.getCenter().lat() + .00002, lng: map.getCenter().lng() - .00002 },
            { lat: map.getCenter().lat() + .00002, lng: map.getCenter().lng() + .00002 },
            { lat: map.getCenter().lat() - .00002, lng: map.getCenter().lng() + .00002 },
            { lat: map.getCenter().lat() - .00002, lng: map.getCenter().lng() - .00002 }
        ];
        //add obstacle to visible center of map
        var polyObstacle = addPolyObstacleOptions(polyCoords);
        setSelection(polyObstacle);
    }
    function addPolyObstacleOptions(vertices) {
        //add obstacle to visible center of map
        var polyObstacle = new google.maps.Polygon({
            map: map,
            paths: vertices,
            strokeColor: '#FF0000',
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillColor: '#FF0000',
            fillOpacity: 0.35,
            draggable: true,
            editable: true,
            geodesic: true,
            zIndex: 100
        });
        google.maps.event.addListener(polyObstacle, 'click', function (e) {
            setSelection(polyObstacle);
        });
        polyObstacles.add(polyObstacle);
        return polyObstacle;
    }
    /**
     * Add a generic circle-shaped area to the center of the map -- the idea
     * is that users will move and reshape the circle over
     * areas that they want their mower to avoid
     */
    function addCircleObstacle() {
        let circleObstacle = addCircleObstacleOptions(2, map.getCenter().lat(), map.getCenter().lng());
        setSelection(circleObstacle);
    }
    function addCircleObstacleOptions(radius, lat, lng) {
        var circleObstacle = new google.maps.Circle({
            strokeColor: '#FF0000',
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillColor: '#FF0000',
            fillOpacity: 0.35,
            map: map,
            center: new google.maps.LatLng(lat, lng),
            radius: radius,
            draggable: true,
            editable: true,
            zIndex: 100
        });
        google.maps.event.addListener(circleObstacle, 'click', function (e) {
            setSelection(circleObstacle);
        });
        circleObstacles.add(circleObstacle);
        return circleObstacle;
    }
    /**
     * Add drawing tools (i.e. that user will use to draw mission) to map
     */
    function addDrawingToolsToMap() {
        // Creates a drawing manager attached to the map that allows the user to draw
        // markers, lines, and shapes.
        drawingManager = new google.maps.drawing.DrawingManager({
            drawingMode: google.maps.drawing.OverlayType.POLYGON,
            drawingControlOptions: {
                drawingModes: [
                    google.maps.drawing.OverlayType.POLYGON
                ]
            },
            markerOptions: {
                draggable: true
            },
            polylineOptions: {
                editable: true,
                draggable: true
            },
            rectangleOptions: polyOptions,
            circleOptions: polyOptions,
            polygonOptions: polyOptions,
            map: map
        });
        addPolygonClickHandlers();
        // Clear the current selection when the drawing mode is changed, or when the
        // map is clicked.
        google.maps.event.addListener(drawingManager, 'drawingmode_changed', clearSelection);
        google.maps.event.addListener(map, 'click', clearSelection);
        google.maps.event.addDomListener($('deleteBtn'), 'click', confirmDeleteSelectedShape);
        google.maps.event.addDomListener($('savePolygonBtn'), 'click', savePolygon);
        google.maps.event.addDomListener($('loadPolygonBtn'), 'click', loadSavedPolygon);
        google.maps.event.addDomListener($('downloadPolygonBtn'), 'click', downloadPolygon);
        google.maps.event.addDomListener($('addCircleObstacleBtn'), 'click', addCircleObstacle);
        google.maps.event.addDomListener($('addPolyObstacleBtn'), 'click', addPolyObstacle);
        selectColor(colors[0]);
        google.maps.event.addListener(drawingManager, 'polygoncomplete', function (polygon) {
            missionPolygon = polygon;
            drawingManager.setOptions({
                drawingControl: false
            });
        });
        google.maps.event.addDomListener($('downloadWaypointsBtn'), 'click', function () {
            if (missionPathPolyline != null) {
                var missionWaypointString = buildMissionWaypointString(missionPathPolyline.getPath());
                download("mission.csv", missionWaypointString);
            }
        });
        google.maps.event.addDomListener($('buildMissionBtn'), 'click', function () {
            var truckLoadOfDataForServer = mapUserEnteredMapDataAsBigHonkinHash(true);
            let pathWidthStr = $('pathWidth').value;
            //Now we want to send this data up to the server
            postData(JSON.stringify(truckLoadOfDataForServer), pathWidthStr);
            saveMapLocationToCookie();
        });
    } //End function addDrawingToolsToMap
    /**
     * Constructs an object holding all the user-entered map data
     *
     * @param saveCirclesAsPolygons Do you want this method to appoximate the circles
     * as polygons and throw them in with the other polygons? Presently we do
     * this for sending the data to the server but for saving the client
     * data locally we retain the original circle dimensions.
     */
    function mapUserEnteredMapDataAsBigHonkinHash(saveCirclesAsPolygons) {
        let missionPolygonLatLng = [];
        var polygonBounds = missionPolygon.getPath();
        // Iterate over the polygonBounds vertices.
        polygonBounds.forEach(function (xy, i) {
            missionPolygonLatLng.push(new LL(xy.lat(), xy.lng()));
        });
        var latLngBoundsString = JSON.stringify(missionPolygonLatLng);
        console.log(latLngBoundsString);
        var polyArray = [];
        polyObstacles.forEach(function (poly, i) {
            var polyObstacleBoundsArray = [];
            poly.getPath().forEach(function (xy, i) {
                polyObstacleBoundsArray.push(new LL(xy.lat(), xy.lng()));
            });
            polyArray.push(polyObstacleBoundsArray);
        });
        let startLat = startMarker.getPosition().lat();
        let startLng = startMarker.getPosition().lng();
        var bigHonkinUserMapDataHash = {
            'missionPolygon': missionPolygonLatLng,
            'startMarker': new LL(startLat, startLng),
            'mowingPathWidthInMeters': $('pathWidth').value,
            'heading': $('heading').value
        };
        if (saveCirclesAsPolygons) {
            circleObstacles.forEach(function (circle, i) {
                var circleAsLagLngArray = approximateCircleAsPolygon(circle.getCenter(), circle.getRadius(), 18);
                polyArray.push(circleAsLagLngArray);
            });
        }
        else {
            var circleArray = [];
            circleObstacles.forEach(function (circle, i) {
                var center = circle.getCenter();
                var radius = circle.getRadius();
                var circleObstacleMap = {
                    'radius': radius,
                    'lat': center.lat(),
                    'lng': center.lng()
                };
                circleArray.push(circleObstacleMap);
            });
            bigHonkinUserMapDataHash['circleObstacles'] = circleArray;
        }
        bigHonkinUserMapDataHash['polyObstacles'] = polyArray;
        return bigHonkinUserMapDataHash;
    }
    /**
     * Approximate circle as polygon
     *
     * Returns a series of polygon points of type Array<ILL> that represent the
     * approximation of the circle as a polyon
     *
     * Credit: https://stackoverflow.com/questions/24733481/how-to-draw-a-circle-using-polygon-in-googlemaps
     *
     * @param center Latitude/Longitude of circle' center
     * @param radius Radius in meters
     * @param points Number of polygon vertices to use to reflect the circle as a polygon
     */
    function approximateCircleAsPolygon(center, radius, points) {
        let llArray = [];
        let p = 360 / points;
        let d = 0;
        for (var i = 0; i < points; ++i, d += p) {
            var offsetLatLng = google.maps.geometry.spherical.computeOffset(center, radius, d);
            llArray.push(new LL(offsetLatLng.lat(), offsetLatLng.lng()));
        }
        return llArray;
    }
    /**
     * Map save location logic credit: https://www.daftlogic.com/sandbox-google-maps-remember-last-location.htm
     */
    function saveMapLocationToCookie() {
        let mapzoom = map.getZoom();
        let mapcenter = map.getCenter();
        let maplat = mapcenter.lat();
        let maplng = mapcenter.lng();
        let maptypeid = map.getMapTypeId();
        let cookiestring = maplat + "_" + maplng + "_" + mapzoom + "_" + maptypeid;
        let exp = new Date(); //set new date object
        exp.setTime(exp.getTime() + (1000 * 60 * 60 * 24 * 30)); //set it 30 days ahead
        setCookie("GoogleMapsLocation", cookiestring, exp);
    }
    /**
     * If user previously zoomed in on a location let's give them that location when they come
     * back (i.e. instead of some random high-level location like the Statue of Liberty)
     */
    function loadMapLocationFromCookie() {
        let loadedstring = getCookie("GoogleMapsLocation");
        if (loadedstring) {
            let splitstr = loadedstring.split("_");
            let latlng = new google.maps.LatLng(parseFloat(splitstr[0]), parseFloat(splitstr[1]));
            let savedMapZoom = parseFloat(splitstr[2]);
            //If we don't scale-back the zoom when the user loads the page
            //they may get a gray screen that's basically non-operable (i.e.
            //unless they know to start zooming out)
            if (savedMapZoom > 21.0) {
                savedMapZoom = 21.0;
            }
            map.setCenter(latlng);
            map.setZoom(savedMapZoom);
            map.setMapTypeId(splitstr[3]);
        }
        else {
            //baswell begin testing
            var latlng = new google.maps.LatLng(45.644406753553454, -73.84288944545824);
            map.setCenter(latlng);
            map.setZoom(21);
            map.setMapTypeId("hybrid");
            //baswell end testing
        }
    }
    /**
     * Helper function for setting cookies
     *
     * @param name Cookie name
     * @param value Cookie value
     * @param expires Cookie expiration date
     */
    function setCookie(name, value, expires) {
        if (expires == null) {
            expires = new Date(); //set new date object
            expires.setTime(expires.getTime() + (1000 * 60 * 60 * 24 * 30)); //set it 30 days ahead
        }
        document.cookie = name + "=" + escape(value) + "; path=/" + ((expires == null) ? "" : "; expires=" + expires.toUTCString());
    }
    /**
     * Helper function for reading cookies
     *
     * @param name Cookie name
     */
    function getCookie(name) {
        if (document.cookie.length > 0) {
            let cStart = document.cookie.indexOf(name + "=");
            if (cStart != -1) {
                cStart = cStart + name.length + 1;
                let cEnd = document.cookie.indexOf(";", cStart);
                if (cEnd == -1)
                    cEnd = document.cookie.length;
                return unescape(document.cookie.substring(cStart, cEnd));
            }
        }
        return "";
    }
    /**
     * Adds a marker to the map that represents that starting
     * location of the mission -- user can drag the marker
     * around to decide where they want the mission
     * to start -- also note we draw a dashed
     * line starting at this marker to
     * show the mission heading
     *
     * @param heading Heading at which to draw heading line
     */
    function addStartingLocationMarker(heading) {
        startMarker = new google.maps.Marker({
            position: map.getCenter(),
            label: 'Go',
            title: 'Location where robot begins mission',
            draggable: true,
            map: map
        });
        startMarker.setMap(map);
        var bearingEndPointLatLong = bearingLineEndpointCoords(map.getCenter().lat(), map.getCenter().lng(), heading);
        var bearingLineCoordinates = [
            { lat: map.getCenter().lat(), lng: map.getCenter().lng() },
            { lat: bearingEndPointLatLong.lat, lng: bearingEndPointLatLong.lng }
        ];
        // Define a symbol using SVG path notation
        var lineSymbol = {
            path: 'M 0,-1 0,1',
            strokeColor: '#FF0000',
            strokeOpacity: 0.8,
            scale: 2
        };
        bearingLine = new google.maps.Polyline({
            path: bearingLineCoordinates,
            geodesic: true,
            strokeOpacity: 0,
            icons: [{
                icon: lineSymbol,
                offset: '0',
                repeat: '20px'
            }],
            map: map
        });
        startMarkerMovedRedrawHeadingListener();
    }
    /**
     * Draw the dashed bearing indicator line on the map -- the "bearing" we're
     * talking about here is the heading of the up-and-down
     * (or side-to-side) mission
     *
     * @param latStart Latitude of mission starting point marker
     * @param lngStart Longitude of mission starting point marker
     * @param heading Heading of line we'll draw
     */
    function drawBearingLine(latStart, lngStart, heading) {
        var bearingEndPointLatLong = bearingLineEndpointCoords(latStart, lngStart, heading);
        var bearingLineCoordinates = [
            { lat: latStart, lng: lngStart },
            { lat: bearingEndPointLatLong.lat, lng: bearingEndPointLatLong.lng }
        ];
        bearingLine.setPath(bearingLineCoordinates);
    }
    /**
     * When user drags the startMarker around, update the bearing line
     * to "attach" to the startMarker
     */
    function startMarkerMovedRedrawHeadingListener() {
        google.maps.event.addListener(startMarker, 'dragend', function (evt) {
            let inputValue = $('heading').value;
            drawBearingLine(evt.latLng.lat(), evt.latLng.lng(), parseFloat(inputValue));
        });
        google.maps.event.addListener(startMarker, 'drag', function (evt) {
            let inputValue = $('heading').value;
            drawBearingLine(evt.latLng.lat(), evt.latLng.lng(), parseFloat(inputValue));
        });
    }

</script>

<body>
    <header>
        <%- include('../partials/header') %>
            <script>
                function logout() {
                    socket.emit('logoutUserBal', true);
                }
            </script>
    </header>

    <div class="jumbotron">
        <div class="jumbotron bg-secondary">
            <h1 class="gradient-text">
                <%= title %>
            </h1>
            </br></br></br>
            <div class="grid-container">
                <button id="btConnection" onclick="connectionBluetooth()">Se connecter au Nomad</button>
                <b id="textConnection">Non connecté</b>
                <!-- Main -->
                <main class="main-container">

                    <div class="main-cards">

                        <div class="card">
                            <div class="card-inner">
                                <p class="text-primary">Batterie</p>
                                <span class="material-icons-outlined text-blue">battery_charging_full</span>
                            </div>
                            <span class="text-primary font-weight-bold">79%</span>
                        </div>

                        <div class="card">
                            <div class="card-inner">
                                <p class="text-primary">Mode Tondeuse</p>
                                <span class="material-icons-outlined text-orange">precision_manufacturing</span>
                            </div>
                            <span class="text-primary font-weight-bold">Manuel</span>
                        </div>

                        <div class="card">
                            <div class="card-inner">
                                <p class="text-primary">Progression Coupe</p>
                                <span class="material-icons-outlined text-green">grass</span>
                            </div>
                            <span class="text-primary font-weight-bold">Processing</span>
                        </div>

                        <div class="card">
                            <div class="card-inner">
                                <p class="text-primary">Localisation/Méteo</p>
                                <span class="material-icons-outlined text-red">notification_important</span>
                            </div>
                            <span class="text-primary font-weight-bold">73.245678/-45.324526/pluie</span>
                        </div>

                    </div>

                    <div class="charts">
                        <div class="charts-card">
                            <p class="chart-title">Changement de modes</p>
                            <div id="bar-chart"></div>
                        </div>

                        <div class="charts-card">
                            <p class="chart-title">Décharge de la batterie pendant le fonctionnement</p>
                            <div id="area-chart"></div>
                        </div>

                    </div>
                </main>
                <!-- End Main -->

            </div>
        </div>

        <section id="gps_section">
            <div class="jumbotron bg-secondary">
                <h2 class="gradient-text">
                    GPS
                </h2>
                </br></br></br></br>
                <div id="panel">
                    <div id="controls">
                        <img src="https://best-robot-lawn-mower.com/wp-content/uploads/2022/03/Best-Robot-Lawn-Mower-icon.png"
                            alt="Precision Mule" width="191px">
                        <div class="sub-controls input">
                            Mission Path Width (in Meters):<input type="text" name="pathWidth" id="pathWidth"
                                value="0.5" oninput="pathWidthOnInput(this.value)" required>
                            Mission Heading (in Degrees):<input type="text" name="heading" id="heading" value="0"
                                oninput="headingOnInput(this.value)" required>
                        </div>
                        <div class="sub-controls actions">
                            <button id="buildMissionBtn">Build Mission</button>
                            <button id="downloadWaypointsBtn">Download Waypoint File</button>
                        </div>
                        <div class="sub-controls actions">
                            <button id="addCircleObstacleBtn">Add Circle Obstacle</button>
                            <button id="addPolyObstacleBtn">Add Freeform Obstacle</button>
                        </div>
                        <div class="sub-controls actions">
                            <button id="deleteBtn">Delete Selected Shape</button>
                        </div>
                        <div class="sub-controls actions">
                            <button id="savePolygonBtn">Save Polygon to Cache</button>
                            <button id="loadPolygonBtn">Load Cached Polygon</button>
                        </div>
                        <div class="sub-controls actions">
                            <div>
                                Import Polygon file:
                                <input type="file" name="file" id="file">
                            </div>
                            <button id="downloadPolygonBtn">Download Polygon File</button>
                        </div>
                        <div class="sub-controls actions">
                            <div>
                                <label for="showWaypointNumber">
                                    <input type="checkbox" onclick="updateMissionPathPolylineMarkers()"
                                        id="showWaypointNumbersCheckbox">Show waypoint #s
                                </label>
                            </div>
                        </div>
                        </br>
                        <div>
                            Exporter le trajet du robot (.CSV):
                            </br>
                            <input id="csv" type="file" accept=".csv" class="file">
                        </div>
                        <button id="submitButton">Envoyer</button>
                        <button id="cancelButton" onclick="cancelEnvoiBtProg()">Arrêter</button>
                        <pre id="out"><p></p></pre>
                    </div>
                    </br>
                </div>
                <div id="map"></div>
                <!-- <script type="text/javascript" src="index.js"></script> -->
                <script
                    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBXaBXU51BxNj6WuqdU-JHx5oIVR5uM350&callback=initMap&libraries=drawing,geometry"
                    async defer></script>

                <!-- Global site tag (gtag.js) - Google Analytics -->
                <script async src="https://www.googletagmanager.com/gtag/js?id=UA-96994646-1"></script>
                <!-- <script src="./js/analytics.js"></script> -->
                </br></br></br></br></br>
            </div>
        </section>


        <section id="modes_section">
            <div class="jumbotron bg-secondary">
                <h2 class="gradient-text">
                    Contrôle Manuel
                </h2>
                </br></br></br>
                <p id="statutManette" class="indicationText">La manette est déconnecté.</p>
                <p id="commandeManette" class="indicationText"></p>
                <div class="center">
                    <svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg"
                        xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="600px" height="500px"
                        xml:space="preserve" viewBox="0 0 600 500">
                        <g>
                            <g>
                                <path id="controller-b13" name="down"
                                    d="M114.003,255.595c-5.043,3.696-10.324,8.09-11.102,9.663c-1.353,2.705-3.244,17.252-2.889,22.24
                                         c0.073,1.053,0.306,4.26,13.972,4.266l0.042,3.06v-3.06c13.666-0.006,13.898-3.213,13.972-4.271
                                         c0.355-4.976-1.53-19.523-2.889-22.234C124.407,263.851,119.682,259.762,114.003,255.595z" />

                                <rect id="controller-b8" name="select" x="227.994" y="238.771" width="18.898"
                                    height="7.711" />

                                <path id="controller-b12" name="up" d="M114.003,232.84c5.686-4.167,10.404-8.256,11.108-9.669c1.353-2.699,3.244-17.246,2.889-22.24
                                         c-0.08-1.053-0.306-4.254-13.972-4.26c-13.708,0.006-13.935,3.207-14.015,4.26c-0.355,4.987,1.53,19.535,2.889,22.24
                                         C103.685,224.744,108.96,229.15,114.003,232.84z" />
                                <path id="controller-b14" name="left"
                                    d="M92.962,233.11c-2.46-1.229-14.584-2.925-20.918-2.925c-0.502,0-0.937,0.012-1.31,0.042
                                         c-1.059,0.074-4.266,0.301-4.271,13.966c0.006,13.709,3.213,13.936,4.266,14.009c0.379,0.031,0.82,0.043,1.316,0.043
                                         c6.34,0,18.464-1.688,20.918-2.925c1.671-0.839,6.353-6.573,9.676-11.102C98.936,239.181,94.529,233.893,92.962,233.11z" />
                                <path id="controller-b15" name="right" d="M157.284,230.234c-0.379-0.031-0.82-0.043-1.316-0.043c-6.34,0-18.464,1.689-20.924,2.925
                                         c-1.566,0.784-5.973,6.065-9.669,11.108c3.317,4.528,7.999,10.27,9.669,11.102c2.46,1.23,14.584,2.925,20.918,2.925
                                         c0.496,0,0.936-0.012,1.31-0.042c1.059-0.074,4.266-0.3,4.271-13.966c0-0.05,0-0.092,0-0.129
                                         C161.525,230.528,158.336,230.301,157.284,230.234z" />
                                <circle id="controller-b3" cx="465.824" cy="194.529" r="19.866" />
                                <circle id="controller-b1" cx="512.446" cy="241.152" r="19.865" />
                                <circle id="controller-b0" cx="465.824" cy="287.774" r="19.865" />
                                <circle id="controller-b2" cx="419.202" cy="241.152" r="19.865" />
                                <polygon id="controller-b9" name="select" points="333.062,246.586
                                            349.171,241.751 333.062,237.381" />
                                <path id="layout"
                                    d="M561.234,241.611c-2.441-18.305-10.171-52.075-43.531-75.264l-8.14-31.328c0,0-0.813-7.729-10.985-13.428
                                         c0,0,0.612-5.288-8.745-7.729c-9.357-2.442-31.127-7.117-56.549,1.426c0,0-3.868,1.016-3.66,6.714c0,0-12.001,5.899-14.443,16.885
                                         c-2.441,10.985-5.697,24.816-5.697,24.816h-36.916H211.195h-39.56c0,0-3.256-13.831-5.698-24.816s-14.443-16.885-14.443-16.885
                                         c0.202-5.698-3.66-6.714-3.66-6.714c-25.429-8.543-47.191-3.868-56.549-1.426c-9.357,2.441-8.746,7.729-8.746,7.729
                                         c-10.171,5.698-10.985,13.428-10.985,13.428l-8.14,31.328c-33.36,23.188-41.09,56.959-43.532,75.264
                                         C17.441,259.921,1.579,380.344,0.354,394.58c-1.218,14.241-2.032,67.534,46.788,75.264s74.45-36.615,74.45-36.615l32.956-57.161
                                         c73.636,57.161,108.624-20.545,108.624-20.545h54.774c0,0,34.988,77.706,108.624,20.545l32.956,57.161
                                         c0,0,25.631,44.345,74.45,36.615s48.005-61.028,46.787-75.264C579.546,380.338,563.677,259.916,561.234,241.611z M465.824,168.544
                                         c14.326,0,25.985,11.658,25.985,25.985c0,14.326-11.659,25.985-25.985,25.985c-14.327,0-25.985-11.659-25.985-25.985
                                         C439.839,180.203,451.497,168.544,465.824,168.544z M317.322,191.175c3.776,0,7.552,0,11.322,0
                                         c0.036,0.129,0.049,1.983,0.012,2.265c-0.062,0.006-0.128,0.013-0.195,0.013c-0.386,0-0.777,0-1.163,0
                                         c-0.043,0-0.086,0-0.129,0.006c-0.152,0.024-0.238,0.122-0.208,0.275c0.024,0.116,0.073,0.245,0.141,0.343
                                         c0.116,0.171,0.251,0.324,0.392,0.478c1.114,1.218,2.222,2.43,3.336,3.642c0.03,0.03,0.061,0.055,0.104,0.092
                                         c0.049-0.056,0.099-0.104,0.147-0.153c1.261-1.377,2.515-2.754,3.775-4.131c0.031-0.031,0.062-0.067,0.08-0.104
                                         c0.086-0.128,0.062-0.251-0.056-0.349c-0.098-0.079-0.208-0.098-0.336-0.098c-0.392,0.006-0.79,0-1.182,0
                                         c-0.055,0-0.11-0.013-0.177-0.019c0-0.759,0-1.506,0-2.265c3.06,0,6.113,0,9.18,0c0,0.753,0,1.5,0,2.271c-0.067,0-0.135,0-0.202,0
                                         c-0.746,0-1.493,0-2.233,0c-0.123,0-0.208,0.037-0.294,0.123c-2.411,2.57-4.822,5.141-7.234,7.711
                                         c-0.079,0.086-0.109,0.165-0.109,0.281c0.006,0.991,0,1.977,0,2.969c0,0.042,0,0.085,0.006,0.128
                                         c0.019,0.196,0.116,0.312,0.318,0.337c0.085,0.012,0.171,0,0.263,0c0.839,0,1.677,0,2.516,0c0.024,0,0.049,0.006,0.086,0.012
                                         c0,0.68,0,1.353,0,2.032c-3.709,0-7.405,0-11.114,0c0-0.68,0-1.353,0-2.05c0.073,0,0.141,0,0.208,0c0.716,0,1.426,0,2.142,0
                                         c0.074,0,0.153,0,0.227-0.007c0.232-0.024,0.355-0.159,0.374-0.397c0-0.037,0-0.073,0-0.11c0-1.034,0-2.068,0-3.103
                                         c0-0.122-0.031-0.208-0.117-0.3c-2.282-2.503-4.571-5.007-6.848-7.51c-0.086-0.098-0.178-0.135-0.306-0.135
                                         c-0.833,0.007-1.665,0-2.497,0c-0.067,0-0.135,0-0.215,0C317.322,192.681,317.322,191.935,317.322,191.175z M289.892,191.169
                                         c0.079-0.006,0.159-0.006,0.238-0.006c2.51,0,5.025,0,7.535,0c0.109,0,0.227,0.006,0.336,0c0.135-0.013,0.232,0.03,0.337,0.122
                                         c0.691,0.631,1.383,1.255,2.074,1.879c2.84,2.559,5.674,5.116,8.514,7.675c0.055,0.049,0.11,0.098,0.202,0.178
                                         c0-0.11,0.006-0.184,0.006-0.251c0-2.032,0-4.058,0-6.09c0-0.159,0-0.312,0-0.471c0.006-0.258-0.11-0.441-0.324-0.575
                                         c-0.196-0.123-0.41-0.178-0.643-0.178c-0.704,0-1.402,0-2.105,0c-0.067,0-0.135,0-0.215,0c0-0.766,0-1.506,0-2.252
                                         c0,0,0.007-0.007,0.013-0.013s0.013-0.013,0.013-0.013c3.139-0.006,6.272-0.006,9.412-0.012c0.037,0,0.073,0.006,0.122,0.006
                                         c0,0.753,0,1.506,0,2.276c-0.073,0-0.141,0-0.208,0c-0.679,0-1.353,0-2.031-0.006c-0.569,0-0.82,0.239-0.845,0.814
                                         c-0.007,0.085-0.007,0.177-0.007,0.263c0,4.113,0,8.231,0,12.344c0,0.08,0,0.159,0,0.251c-0.073,0.007-0.122,0.013-0.177,0.013
                                         c-1.065,0-2.13,0-3.195,0c-0.109,0-0.189-0.03-0.269-0.104c-4.07-3.623-8.14-7.239-12.21-10.862
                                         c-0.049-0.043-0.104-0.086-0.184-0.153c0,0.098,0,0.159,0,0.221c0,2.723,0,5.446,0,8.17c0,0.104,0.013,0.214,0.024,0.318
                                         c0.019,0.116,0.092,0.189,0.215,0.208c0.135,0.019,0.275,0.024,0.41,0.024c0.765,0,1.529,0,2.295,0c0.067,0,0.135,0,0.214,0
                                         c0,0.729,0,1.438,0,2.16c-3.17,0-6.328,0-9.504,0c0-0.716,0-1.426,0-2.16c0.073,0,0.141,0,0.208,0c0.697,0,1.389,0,2.087,0
                                         c0.079,0,0.165,0,0.244-0.013c0.245-0.036,0.386-0.195,0.398-0.446c0-0.049,0-0.098,0-0.153c0-3.47,0-6.939,0-10.41
                                         c0-0.049,0-0.098,0-0.152c-0.007-0.294-0.116-0.429-0.398-0.478c-0.135-0.024-0.275-0.037-0.41-0.037
                                         c-0.648-0.006-1.303,0-1.953,0c-0.067,0-0.135,0-0.227,0C289.892,192.565,289.892,191.879,289.892,191.169z M264.072,195.111
                                         c0.661-1.077,1.523-1.965,2.54-2.711c1.383-1.016,2.925-1.701,4.584-2.143c1.646-0.44,3.323-0.6,5.024-0.52
                                         c2.093,0.098,4.101,0.551,5.998,1.456c1.322,0.631,2.515,1.451,3.513,2.534c0.888,0.961,1.549,2.044,1.879,3.316
                                         c0.453,1.708,0.251,3.354-0.544,4.921c-0.661,1.298-1.628,2.338-2.791,3.201c-1.414,1.046-2.993,1.744-4.682,2.185
                                         c-0.979,0.257-1.971,0.416-2.98,0.483c-0.392,0.024-0.79,0.006-1.181,0.006c0,0.006,0,0.013,0,0.019
                                         c-0.508-0.019-1.016-0.006-1.518-0.055c-2.644-0.239-5.098-1.022-7.265-2.589c-1.138-0.82-2.081-1.818-2.76-3.061
                                         c-0.605-1.107-0.912-2.289-0.875-3.55C263.043,197.351,263.417,196.188,264.072,195.111z M240.008,192.565
                                         c0.557-0.562,1.206-0.991,1.909-1.353c1.041-0.532,2.136-0.881,3.274-1.126c1.175-0.251,2.356-0.392,3.562-0.38
                                         c0.937,0.013,1.861,0.123,2.779,0.3c1.322,0.258,2.613,0.637,3.862,1.151c0.25,0.104,0.489,0.244,0.747,0.354
                                         c0.085,0.037,0.189,0.062,0.288,0.056c0.189-0.013,0.245-0.08,0.245-0.275c0-0.19,0-0.386,0-0.576
                                         c0.153-0.042,2.148-0.049,2.369-0.012c0,1.836,0,3.672,0,5.521c-0.765,0-1.518,0-2.289,0c-0.012-0.086-0.018-0.159-0.031-0.239
                                         c-0.092-0.667-0.404-1.218-0.881-1.683c-0.459-0.44-0.998-0.753-1.579-0.998c-0.79-0.343-1.622-0.557-2.466-0.703
                                         c-1.2-0.215-2.412-0.3-3.629-0.264c-0.899,0.031-1.799,0.104-2.681,0.324c-0.361,0.092-0.709,0.208-1.04,0.38
                                         c-0.239,0.122-0.465,0.275-0.643,0.478c-0.208,0.232-0.325,0.502-0.343,0.813c-0.012,0.264,0.08,0.49,0.281,0.643
                                         c0.166,0.129,0.355,0.239,0.545,0.318c0.447,0.196,0.93,0.288,1.414,0.373c0.949,0.166,1.91,0.251,2.871,0.343
                                         c1.53,0.153,3.066,0.294,4.583,0.563c1.175,0.208,2.326,0.478,3.434,0.942c0.698,0.288,1.353,0.648,1.928,1.15
                                         c0.894,0.777,1.396,1.75,1.493,2.932c0.135,1.523-0.392,2.772-1.548,3.764c-0.71,0.606-1.524,1.022-2.393,1.353
                                         c-1.016,0.386-2.068,0.631-3.139,0.796c-0.906,0.135-1.812,0.227-2.729,0.227c-0.563,0-1.126-0.067-1.683-0.159
                                         c-1.818-0.3-3.605-0.729-5.367-1.268c-0.233-0.073-0.459-0.152-0.673-0.275c-0.208-0.122-0.453-0.116-0.71-0.109
                                         c0,0.336,0,0.667,0,1.003c-0.912,0-1.805,0-2.699,0c-0.043-0.128-0.062-5.905-0.019-6.261c0.135-0.036,2.375-0.042,2.564-0.006
                                         c0.024,0.172,0.037,0.343,0.073,0.515c0.141,0.722,0.514,1.31,1.046,1.799c0.594,0.551,1.292,0.924,2.032,1.224
                                         c0.851,0.343,1.738,0.563,2.644,0.71c1.2,0.196,2.411,0.275,3.629,0.227c0.918-0.036,1.817-0.171,2.68-0.52
                                         c0.478-0.19,0.912-0.441,1.285-0.796c0.196-0.184,0.368-0.392,0.496-0.631c0.061-0.109,0.073-0.22,0.049-0.343
                                         c-0.061-0.317-0.232-0.562-0.478-0.765c-0.238-0.195-0.514-0.33-0.802-0.446c-0.575-0.233-1.181-0.367-1.793-0.478
                                         c-1.022-0.189-2.056-0.307-3.084-0.423c-1.475-0.171-2.95-0.324-4.406-0.594c-1.175-0.22-2.338-0.489-3.439-0.979
                                         c-0.667-0.294-1.292-0.667-1.806-1.2c-0.648-0.679-0.967-1.486-0.979-2.423C238.741,194.365,239.194,193.391,240.008,192.565z
                                          M93.911,200.502c0.704-9.938,14.278-9.944,20.067-9.951c5.845,0.007,19.407,0.013,20.123,9.945
                                         c0.379,5.324-1.414,21.224-3.513,25.41c-1.775,3.55-9.804,9.633-14.578,13.036c-0.135,0.122-0.281,0.226-0.447,0.317
                                         c-0.483,0.282-1.022,0.423-1.554,0.423c-0.202,0-0.404-0.024-0.6-0.062c-0.238-0.049-0.471-0.122-0.691-0.22
                                         c-0.263-0.129-0.502-0.275-0.716-0.459c-3.207-2.277-12.663-9.211-14.572-13.036C95.325,221.72,93.525,205.821,93.911,200.502z
                                          M70.288,264.316c-9.938-0.704-9.945-14.278-9.945-20.073c0-5.839,0.006-19.413,9.951-20.117c0.496-0.036,1.083-0.055,1.75-0.055
                                         c5.655,0,19.529,1.506,23.66,3.568c3.825,1.909,10.759,11.377,13.036,14.584c0.202,0.238,0.374,0.508,0.496,0.808
                                         c0.166,0.397,0.245,0.82,0.239,1.236c-0.006,0.452-0.11,0.911-0.318,1.334c-0.116,0.227-0.257,0.44-0.416,0.63
                                         c-1.805,2.559-9.051,12.589-13.036,14.578c-4.125,2.062-18.005,3.568-23.66,3.568C71.377,264.371,70.784,264.353,70.288,264.316z
                                          M134.101,287.927c-0.71,9.944-14.278,9.951-20.067,9.957l0,0h-0.024c-5.82-0.006-19.388-0.013-20.092-9.957
                                         c-0.379-5.312,1.414-21.212,3.513-25.404c1.909-3.819,11.377-10.759,14.578-13.036c0.135-0.116,0.282-0.22,0.441-0.312
                                         c0.232-0.135,0.477-0.239,0.728-0.312c0.795-0.214,1.659-0.128,2.393,0.294c0.196,0.116,0.379,0.251,0.539,0.397
                                         c4.798,3.428,12.723,9.443,14.48,12.963C132.681,266.721,134.48,282.615,134.101,287.927z M155.968,264.371
                                         c-5.649,0-19.529-1.505-23.654-3.567c-3.99-1.989-11.242-12.044-13.036-14.584c-0.128-0.147-0.245-0.318-0.343-0.496
                                         c-0.293-0.532-0.422-1.132-0.385-1.72c0.024-0.373,0.116-0.74,0.281-1.096c0.123-0.257,0.275-0.495,0.459-0.71
                                         c2.295-3.219,9.211-12.649,13.023-14.559c4.131-2.062,18.005-3.568,23.66-3.568c0.661,0,1.254,0.019,1.756,0.055
                                         c9.872,0.704,9.945,14.101,9.945,19.958c0,0.049,0,0.092,0,0.135c-0.006,5.819-0.012,19.394-9.957,20.098
                                         C157.223,264.353,156.629,264.371,155.968,264.371z M200.111,364.892c-22.326,0-40.49-18.164-40.49-40.484
                                         c0-22.325,18.164-40.489,40.49-40.489s40.49,18.164,40.49,40.489C240.607,346.728,222.437,364.892,200.111,364.892z
                                          M253.013,247.712c0,2.692-2.191,4.89-4.89,4.89h-21.358c-2.699,0-4.89-2.19-4.89-4.89v-10.172c0-2.692,2.191-4.89,4.89-4.89
                                         h21.358c2.699,0,4.89,2.191,4.89,4.89V247.712z M290.559,329.756c-18.74,0-33.991-15.244-33.991-33.99
                                         c0-18.745,15.245-33.99,33.991-33.99s33.991,15.245,33.991,33.99C324.55,314.512,309.305,329.756,290.559,329.756z
                                          M332.708,253.08c-0.281,0.092-0.582,0.129-0.882,0.129c-2.692,0-4.89-2.191-4.89-4.891v-12.613c0-2.974,2.858-5.569,5.691-4.785
                                         l26.243,7.123c1.334,0.361,2.258,1.573,2.258,2.95c0,2.509-1.903,4.584-4.339,4.859L332.708,253.08z M381.362,364.892
                                         c-22.326,0-40.49-18.164-40.49-40.484c0-22.325,18.164-40.489,40.49-40.489c22.325,0,40.489,18.164,40.489,40.489
                                         C421.852,346.728,403.688,364.892,381.362,364.892z M419.202,267.137c-14.327,0-25.986-11.658-25.986-25.985
                                         s11.659-25.985,25.986-25.985c14.326,0,25.985,11.658,25.985,25.985C445.182,255.479,433.528,267.137,419.202,267.137z
                                          M465.824,313.759c-14.327,0-25.985-11.658-25.985-25.985s11.658-25.985,25.985-25.985c14.326,0,25.985,11.658,25.985,25.985
                                         C491.804,302.101,480.15,313.759,465.824,313.759z M512.446,267.137c-14.327,0-25.985-11.658-25.985-25.985
                                         s11.658-25.985,25.985-25.985s25.985,11.658,25.985,25.985C538.426,255.479,526.772,267.137,512.446,267.137z" />
                                <path d="M270.437,203.63c1.407,0.997,2.993,1.444,4.541,1.462c1.181,0,2.167-0.171,3.103-0.52
                                         c0.067-0.024,0.116-0.074,0.184-0.099c0.012-0.006,0.031,0,0.043-0.006c1.334-0.502,2.466-1.279,3.292-2.454
                                         c1.114-1.579,1.377-3.292,0.704-5.116c-0.472-1.279-1.334-2.265-2.473-2.986c-0.563-0.355-1.138-0.631-1.72-0.839
                                         c-1.806-0.703-3.703-0.74-5.667-0.11c-1.396,0.447-2.577,1.236-3.464,2.412c-1.193,1.585-1.53,3.341-0.888,5.232
                                         C268.527,201.874,269.353,202.859,270.437,203.63z" />

                                <circle cx="290.000" cy="295.000" r="35" width="50.898" height="100.711" stroke="black"
                                    fill="black" />
                                <rect x="227.994" y="190.0" width="120.898" height="17.5" stroke="black" fill="black" />

                                <rect id="controller-b4" x="83.5" y="110.0" width="70" height="20" rx="16.5"
                                    stroke-width="3">
                                </rect>
                                <rect id="controller-b5" x="429.5" y="110.0" width="70" height="20" rx="16.5"
                                    stroke-width="3">
                                </rect>

                                <rect id="controller-b6" x="99.994" y="50.0" height="50.898" width="35.5" fill="black"
                                    rx="19" ry="10" />

                                <rect id="controller-b7" x="448.994" y="50.0" height="50.898" width="35.5" fill="black"
                                    rx="19" ry="10" />

                                <circle id="controller-b10-below" name="left-stick" cx="200.000" cy="325.000"
                                    data-original-x-position="200.000" data-original-y-position="325.000" r="15"
                                    width="50.898" height="100.711" stroke="black" fill="black" />

                                <circle id="controller-b10" name="left-stick" cx="200.000" cy="325.000"
                                    data-original-x-position="200.000" data-original-y-position="325.000" r="35"
                                    width="50.898" height="100.711" fill="rgb(105, 4, 4)" />

                                <circle id="controller-b11-bottom" name="stick-right" cx="381.000" cy="325.000"
                                    data-original-x-position="381.000" data-original-y-position="325.000" r="15"
                                    width="50.898" height="100.711" stroke="black" fill="black" />

                                <circle id="controller-b11" name="stick-right" cx="381.000" cy="325.000"
                                    data-original-x-position="381.000" data-original-y-position="325.000" r="35"
                                    width="50.898" height="100.711" fill="rgb(105, 4, 4)" />
                            </g>
                        </g>
                        <g></g>
                        <g></g>
                        <g></g>
                        <g></g>
                        <g></g>
                        <g></g>
                        <g></g>
                        <g></g>
                        <g></g>
                        <g></g>
                        <g></g>
                        <g></g>
                        <g></g>
                        <g></g>
                        <g></g>
                    </svg>
                </div>
        </section>
        <div class="text-center">
            <a href="https://github.com/raphou-ops/tondeuse.git">GitHub
                Repository</a>&nbsp;&nbsp;|&nbsp;&nbsp;<a href="https://slack.com/">Nous
                contacter</a>
        </div>
    </div>
    <script>
        var switchButtonState = false;
        function connectionBluetooth() {
            switchButtonState = !switchButtonState;
            console.log(switchButtonState);
            document.getElementById("btConnection").disabled = true;
            socket.emit('connectBluetooth', switchButtonState);
        }
        socket.on('enableBouton', function (reponse) {
            document.getElementById("btConnection").disabled = false;
            if (reponse) {
                document.getElementById("btConnection").style.backgroundColor = '#66ff33';
                document.getElementById("textConnection").innerHTML = "Connecté";
                document.getElementById("btConnection").innerHTML = "Se déconnecter du Nomad";
            }
            else {
                document.getElementById("btConnection").style.backgroundColor = '#ffffff';
                document.getElementById("textConnection").innerHTML = "Non Connecté";
                document.getElementById("btConnection").innerHTML = "Se connecter au Nomad";
            }
            switchButtonState = reponse;
        });
    </script>

    <script>
        // ---------- CHARTS ----------

        // BAR CHART
        var barChartOptions = {
            series: [{
                data: [10, 8, 6, 4, 2]
            }],
            chart: {
                type: 'bar',
                height: 350,
                toolbar: {
                    show: false
                },
            },
            colors: [
                "#246dec",
                "#cc3c43",
                "#367952",
                "#f5b74f",
                "#4f35a1"
            ],
            plotOptions: {
                bar: {
                    distributed: true,
                    borderRadius: 4,
                    horizontal: false,
                    columnWidth: '40%',
                }
            },
            dataLabels: {
                enabled: false
            },
            legend: {
                show: false
            },
            xaxis: {
                categories: ["Manuel", "Prog", "Auto", "Set Heure", "Set PIN"],
            },
            yaxis: {
                title: {
                    text: "Count"
                }
            }
        };

        var barChart = new ApexCharts(document.querySelector("#bar-chart"), barChartOptions);
        barChart.render();


        // AREA CHART
        var areaChartOptions = {
            series: [{
                name: 'Pourcentage de la batterie',
                data: [31, 40, 28, 51, 42, 109, 100]
            }, {
                name: 'Charge de la batterie',
                data: [11, 32, 45, 32, 34, 52, 41]
            }],
            chart: {
                height: 350,
                type: 'area',
                toolbar: {
                    show: false,
                },
            },
            colors: ["#4f35a1", "#246dec"],
            dataLabels: {
                enabled: false,
            },
            stroke: {
                curve: 'smooth'
            },
            labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul"],
            markers: {
                size: 0
            },
            yaxis: [
                {
                    title: {
                        text: 'Pourcentage de la batterie',
                    },
                },
                {
                    opposite: true,
                    title: {
                        text: 'Charge de la batterie',
                    },
                },
            ],
            tooltip: {
                shared: true,
                intersect: false,
            }
        };

        var areaChart = new ApexCharts(document.querySelector("#area-chart"), areaChartOptions);
        areaChart.render();

    </script>

    <script>
        //Variables pour la manette

        var joystickGaucheX = 0;
        var joystickGaucheY = 0;
        var boutonX = 0;
        var boutonO = 0;
        var boutonTriangle = 0;
        let controllerIndex = null;

        //Lignes d'initialisation du gps map

        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
        gtag('js', new Date());

        gtag('config', 'UA-96994646-1');

        //Fonctions pour l'interface de la manette 

        window.addEventListener("gamepadconnected", (event) => {
            const gamepad = event.gamepad;
            controllerIndex = gamepad.index;
            //console.log("connected");
            document.getElementById("statutManette").innerHTML = "La manette est connecté.";
        });

        window.addEventListener("gamepaddisconnected", (event) => {
            controllerIndex = null;
            //console.log("disconnected");
            document.getElementById("statutManette").innerHTML = "La manette est déconnecté.";
        });

        function handleButtons(buttons) {
            for (let i = 0; i < buttons.length; i++) {
                const button = buttons[i];
                const buttonElement = document.getElementById(`controller-b${i}`);
                const selectedButtonClass = "selected-button";

                if (buttonElement) {
                    if (button.value > 0) {
                        buttonElement.classList.add(selectedButtonClass);
                        buttonElement.style.filter = `contrast(${button.value * 150}%)`;
                    } else {
                        buttonElement.classList.remove(selectedButtonClass);
                        buttonElement.style.filter = `contrast(100%)`;
                    }
                    boutonX = buttons[0].value;
                    boutonO = buttons[1].value;
                    boutonTriangle = buttons[3].value;
                }
            }
        }

        function updateStick(elementId, leftRightAxis, upDownAxis) {
            const multiplier = 25;
            const stickLeftRight = leftRightAxis * multiplier;
            const stickUpDown = upDownAxis * multiplier;

            const stick = document.getElementById(elementId);
            const x = Number(stick.dataset.originalXPosition);
            const y = Number(stick.dataset.originalYPosition);

            stick.setAttribute("cx", x + stickLeftRight);
            stick.setAttribute("cy", y + stickUpDown);
        }

        function handleSticks(axes) {
            updateStick("controller-b10", axes[0], axes[1]);
            updateStick("controller-b11", axes[2], axes[3]);
            joystickGaucheX = axes[0] * 512;
            joystickGaucheY = axes[1] * 512;
        }

        function gameLoop() {
            if (controllerIndex !== null) {
                const gamepad = navigator.getGamepads()[controllerIndex];
                handleButtons(gamepad.buttons);
                handleSticks(gamepad.axes);
                // console.log(joystickGaucheX);
                // console.log(joystickGaucheY);
            }
            window.requestAnimationFrame(gameLoop);
        }

        function envoiBluetooth() {
            socket.emit('Bluetooth', joystickGaucheX, joystickGaucheY, boutonX, boutonO, boutonTriangle);
        }

        socket.on('refreshCommande', function (msg) {
            document.getElementById("commandeManette").innerHTML = msg;
        });

        socket.on('finishedSendingData', function () {
            document.getElementById('out').innerHTML = "Processus terminé !";
        });

        /*Fonction pour recuperer les coordonnes dans le fichier*/

        const handleButtonClick = () => {
            const fileInput = document.getElementById('csv');
            const readFile = () => {
                const reader = new FileReader();
                reader.onload = () => {
                    document.getElementById('out').innerHTML = "En processus d'envoi !";
                    var longueur = reader.result.split("\n").length;
                    var row = reader.result.split("\n");
                    console.log(row);

                    socket.emit('progBluetooth', row, longueur, true);
                };
                // start reading the file. When it is done, calls the onload event defined above.
                reader.readAsBinaryString(fileInput.files[0]);
            };

            readFile();
        };

        function cancelEnvoiBtProg() {
            socket.emit('cancelBluetoothProg');
            document.getElementById('out').innerHTML = "L'envoi a été interrompu !";
            const file = document.querySelector('.file');
            if (file != null)
                file.value = '';
        }

        const submitButton = document.getElementById('submitButton');
        submitButton.addEventListener('click', handleButtonClick);

        setInterval(envoiBluetooth, 100);
        gameLoop();
    </script>


    <footer>
        <%- include('../partials/footer') %>
    </footer>
</body>

</html>